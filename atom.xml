<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaraW</title>
  
  <subtitle>Code is Poetry</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.daraw.cn/"/>
  <updated>2018-03-25T14:58:12.474Z</updated>
  <id>https://blog.daraw.cn/</id>
  
  <author>
    <name>DaraW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端函数式编程</title>
    <link href="https://blog.daraw.cn/2017/08/16/fp-with-fe/"/>
    <id>https://blog.daraw.cn/2017/08/16/fp-with-fe/</id>
    <published>2017-08-16T22:19:15.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>前言：这个其实是我最近打算在在团队做的一个分享，这个分享将会聊聊函数式编程在前端的一些成熟的应用以及尝试。<br><a id="more"></a></p><h2 id="Something-interesting"><a href="#Something-interesting" class="headerlink" title="Something interesting"></a>Something interesting</h2><h3 id="罗素悖论"><a href="#罗素悖论" class="headerlink" title="罗素悖论"></a>罗素悖论</h3><p>在讲罗素悖论之前，先提一个小的需求，看看大家能不能实现：</p><blockquote><p>设计出一个函数<code>f</code>，接受一个函数<code>g</code>作为参数，返回布尔值。<br>函数<code>f</code>判断<code>g</code>会不会导致死循环，会则返回<code>true</code>，不会则返回false。</p></blockquote><p>如果学过离散数学的同学可能就会想起来了，这便是著名的<strong>图灵机停机问题</strong>。这个需求看似描述很完备，有输入输出的要求，也有函数功能的要求，但这个需求是不可实现的。<br>证明很简单：假设存在满足上述要求的函数<code>f</code>，那么我们定义一个邪恶的函数<code>evil</code>，其伪代码定义如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f(evil) == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是这里便产生了悖论：如果<code>f</code>判定<code>evil</code>不会死循环，<code>evil</code>就会死循环；反之则不会死循环。所以假设不成立，即不存在符合要求的<code>f</code>。  </p><p>类似的悖论还有著名的理发师悖论：理发师给所有不给自己理发的人理发。<br>不可解的<code>停机问题</code>其实便是<strong>哥德尔不完备定理</strong>的一种形式。</p><h3 id="Lambda-λ-演算"><a href="#Lambda-λ-演算" class="headerlink" title="Lambda (λ) 演算"></a>Lambda (λ) 演算</h3><blockquote><p>Lambda演算可以被称为最小的通用程序设计语言。它包括一条变换规则（变量替换）和一条函数定义方式，Lambda演算之通用在于，任何一个可计算函数都能用这种形式来表达和求值。因而，它是等价于图灵机的。尽管如此，Lambda演算强调的是变换规则的运用，而非实现它们的具体机器。可以认为这是一种更接近软件而非硬件的方式。 –from Wikipedia</p></blockquote><p>这里我不会去讲太多关于Lambda演算的内容，一个原因是在没有一些相关的数理逻辑的前置知识的前提下很难三言两语之内将其描述清楚，另一个原因是我自己也不是很懂（笑。  </p><p>那么为什么会提到Lambda演算呢？在图灵机的停机问题之前，有一个更加有趣的问题：能否判断两个lambda演算表达式是否等价，这个问题和图灵机停机问题同属于判定性问题。邱奇运用λ演算在1936年给出判定性问题一个否定的答案。<br>最重要的，Lambda演算对函数式编程语言有巨大的影响，比如Lisp语言、ML语言和Haskell语言。而通过这些，我们将引入今天的主要话题：函数式编程。但是注意的是，今天我讲的将会是偏前端方向的应用，而不会去过度的探讨演算、或者是范畴论等知识。</p><h2 id="语言层面"><a href="#语言层面" class="headerlink" title="语言层面"></a>语言层面</h2><p>首先放出我的观点：<strong>JavaScriprt 适合也不适合函数式编程</strong>。</p><h3 id="适合函数式编程"><a href="#适合函数式编程" class="headerlink" title="适合函数式编程"></a>适合函数式编程</h3><p>JavaScript是一门多范式的语言，我们很难去说JS到底是面向过程还是面向对象的语言，甚至我们也可以说JS就是一门函数式语言。但是这一切并不是矛盾的，OOP与FP完全可以结合起来使用。  </p><p>对于函数式语言的定义其实没有明确的界限，没有说一定要有Monad，或者是Hindley-Milner类型系统等等。JS中函数是一等对象，所以完全可以认为JS是一门函数式编程语言，而且JS的灵活性允许我们去模拟常见函数式语言中的大多数操作。</p><ul><li><p>纯函数 无副作用</p><blockquote><p>此函数在相同的输入值时，需产生相同的输出。函数的输出和输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。<br>该函数不能有语义上可观察的函数副作用，诸如“触发事件”，使输出设备输出，或更改输出值以外物件的内容等。</p></blockquote></li><li><p>不可变数据</p><blockquote><p>Immutable Data是指一旦被创造后，就不可以被改变的数据。</p></blockquote><p>也许大家会产生疑惑，没有变量应用怎么跑起来？这里注意的是虽然没有变量，但是会有绑定的概念，数据虽然不可变，但是绑定可变。  </p><p>JS本身提供了一个<code>Object.freeze()</code>方法，但是类似浅拷贝，它只是一层浅<code>freeze</code>，所以如果真的要去<code>freeze</code>一个对象，必须一层层递归<code>freeze</code>处理。  </p><p>这样做虽然可以实现不可变，但是无论做不做<code>freeze</code>处理，每次都产生一个新的对象会带来大量的中间变量，这一点后面我讲到Redux的时候也会提到，如果使用过Redux，相信应该知道这个问题，<code>Object.assign</code>会带来大量的中间对象，影响性能，而解决方案就是Immutable.js。<br>Immutable.js是一个不可变数据结构的JS库，它的原理其实也很简单，借助字典树，共享了不变的部分。有兴趣的同学可以读一读一篇著名的文章《Understanding Clojure’s Persistent Vectors》，Immutable.js的实现原理与Clojure的数据结构底层实现非常相似。下面的Redux环节我还会提到这个问题。</p></li><li><p>递归<br>循环和循环是常见的流程控制方式，在绝大多数场景下两者是可以等价互换的。<br>递归的优点在于代码简洁、清晰，并且容易验证正确性。在一些函数式语言中，即使存在流程控制语句<code>if</code> <code>else</code>等等，他们也只是函数的语法糖。  </p></li><li><p>curry / compose / …<br>这些虽然JS没有直接提供，但是已经有足够多的第三方库可以来做这个工作，例如 Underscore / Lodash / Ramda。这些函数的实现也可以阅读上述库的源码来学习。</p></li><li><p>惰性求值<br>惰性求值可以最小化计算机要做的工作。JS中有着一小部分表达式是属于惰性求值的，例如<code>||</code>和<code>&amp;&amp;</code>，这也是所谓的“短路原理”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="literal">true</span> || i++</span><br><span class="line"><span class="literal">false</span> &amp;&amp; i++</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>但是语言直接提供的这点惰性实在是太可怜了，JS中也基本都是立即求值。<br>这里拿Haskell举个例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; <span class="keyword">import</span> Data.List</span><br><span class="line"><span class="type">Prelude</span> <span class="type">Data</span>.<span class="type">List</span>&gt; take <span class="number">10</span> $ sort [<span class="number">100</span>, <span class="number">99.</span><span class="number">.0</span>] :: [<span class="type">Int</span>]</span><br><span class="line"><span class="comment">-- [0,1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure><p>简单介绍下，<code>[Int]</code>是类型标注，表示返回的是一个整型列表；<code>[100, 99..0]</code>代表生成一个等差的列表；<code>sort</code>是排序；<code>$</code>是一个中缀函数，可以理解为把右边部分括起来。<br>这段代码的意思是生成一个100到0的等差数列，把这个等差列表从小到大排序并取出前十个。如果在JavaScript中的等价的代码应该类似如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">100</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  arr.push(i)</span><br><span class="line">&#125;</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><p>无论是什么JS引擎，这段JS代码在执行的时候都会把这个数组的所有元素都遍历一遍；相反的是上面的Haskell代码在执行的时候，Haskell的编译器GHC只会尝试去计算刚好足够取出需要的10个元素为止。所以，在Haskell中，我们完全可以定义出无限长度的数组，然后设法取出其中的一部分，GHC也会在底层通过一些黑魔法来帮助实现。  </p><p>让我们回到JS：在ES6之前，模拟惰性求值的方式一般是thunk函数，或者借助Stream抽象。所幸ES6使得JS拥有了强大的<code>generator</code>函数，我们现在还可以借助它模拟惰性求值。  </p><p>具体的实现可以阅读参考文献中的文章，也有现成的库例如Lazy.js可以使用，这里不再赘述。  </p><p>但是注意的是，惰性求值可以为我们带来较好的性能，也可以导致性能下降。大量的延迟求值，可能会带来内存的消耗积压。Haskell中这个现象称为任务堆积，所以即便是默认惰性求值的Haskell，也为使用者提供了强制立即求值的方法，有兴趣的同学可以自行学习一些Haskell的知识。</p></li></ul><h3 id="不适合函数式编程"><a href="#不适合函数式编程" class="headerlink" title="不适合函数式编程"></a>不适合函数式编程</h3><ul><li><p>递归<br>在JS中，递归容易导致一个致命的问题：<strong>爆栈</strong>。<br>尾递归优化可以使得尾递归在编译时被优化为循环从而避免爆栈，但是到目前为止，JS是没有什么正儿八经的尾递归优化的，当然我们有着<code>Trampolining</code>这样的奇技淫巧可以巧妙的避免爆栈，但是每一层的转换消耗的匿名函数开销也是不可小觑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">while</span> (result <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">      result = result();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reduce = trampoline(<span class="function"><span class="keyword">function</span> <span class="title">myself</span>(<span class="params">f, list, sum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (list.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> val = list.shift();</span><br><span class="line">      <span class="keyword">return</span> myself(f, list, f(val, list));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面这段代码来自贺老在今年的FP China会议上的分享STC VS PTC。<br>ES6早已规定了JS应该有尾递归的优化，但是大家迟迟不去实现，主要是尾递归优化的STC与PTC之争：<br>PTC:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n, total = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> sum(n - <span class="number">1</span>, total + n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PTC目前只有Safari支持，V8可以通过flag开启。STC的问题在于不知道写对了没有，开发时不爆栈不代表生产环境不爆栈，以及很难以调试。<br>STC:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, acc = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">continue</span> factorial(n - <span class="number">1</span>, acc * n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>STC通过新的语法，保证不写对就会报错，但是新的语法会引入维护等一些问题。<br>所以因为STC与PTC之争，至今JS仍没有一个可靠的尾递归优化。</p></li><li><p>纯函数难以保证<br>在Haskell、Clojure等语言中，会有语言或者是编译的层面去做纯度的保障，但是在JS中，这一切只能靠我们自己来做约束，在多人合作的时候很难保证不会有坑。</p></li><li><p>弱类型，难以模拟类型系统</p></li><li>没有 monadic io</li><li>。。。</li></ul><h2 id="架构层面"><a href="#架构层面" class="headerlink" title="架构层面"></a>架构层面</h2><p>事实上，随着RxJS、React全家桶等受函数式影响的库的崛起，前端可以说是工程里应用函数式最为成熟的领域之一了。目前应用函数式比较广泛的领域还有金融（Haskell、Erlang等等），大数据（Scala）。</p><h3 id="React全家桶"><a href="#React全家桶" class="headerlink" title="React全家桶"></a>React全家桶</h3><p>首先，<strong>这不是一个React全家桶相关的入门介绍文章</strong>，理解接下来的内容期望你至少有一些React的相关开发经验，有一些Redux的开发经验就更棒了！</p><ul><li><p>React<br>先说说React，提及React，大家想到的往往是V-DOM，以至于Vue2在引入V-DOM后，两者已经极其相似了，事实上两者在设计思想上有一个很大的区别，在于React更加追求纯度，Vue的作者尤雨溪也曾明确表示Vue并不像React那样追求纯度。</p><p>相信大家都知道语法糖，这是指简化的语法，鼓励大家使用，例如ES6的Class、Arrow Function等等都是语法糖。那么不知道你有没有思考过，为什么React的生命周期函数的名字那么长？为什么React直接输出HTML的API名字<code>dangerouslySetInnerHTML</code>那么长？<br>这其实是一个很古老的API设计，叫做<strong>语法盐</strong>，与语法糖相反，它设计出让人感觉难用的API，让使用者在使用前多加思考是不是真的需要使用这些API，从而避免写出低质量的代码设计。</p><p>既然React不鼓励使用生命周期函数，那么React鼓励的是什么呢？答案是<strong>Pure Component</strong>。<br>React鼓励你去从一个不变的角度思考组件，如果你的组件无须设定生命周期钩子函数，那么你的组件类可以继承<code>PureComponent</code>而非普通的<code>Component</code>，<code>PureComponent</code>会自动去做<code>shouldComponentUpdate()</code>的判断优化。<br>但是<code>PureComponent</code>并非万能的灵药，先抛去其浅对比（shallowly compare）<code>state / prop</code>的缺陷不谈，一个应用怎么可能避免不了状态呢？React并不管，它只管给定状态就能做到幂等渲染，虽然保证了自身的纯度，却把状态的问题抛回给了用户。</p></li><li><p>Redux<br>这是社区对React应用的数据层解决方案。这里我也不会去讲Flux架构入门基础，更不会去讲其被讲烂了的Pub/Sub设计模式。</p><p>接触过Redux的一定会对Redux中反复提及<code>reducer</code>纯函数、<code>state</code>不可变等函数式的概念印象深刻；如果读过Redux的源码，你会发现Redux内部通过<code>compose</code>以极低的代码成本实现了洋葱模型的中间件。</p><p>除去这些函数式风格的API，和函数式的实现，更重要的是Redux实现了一套CQRS + ES软件架构。<br>CQRS全称Command Query Responsibility Segregation，即命令查询职责分离；ES全称Event Sourcing，即事件溯源。为什么会提CQRS + ES架构呢？因为目前为止，可以看到的基于函数式的大型项目至少一半都是基于这套架构，</p><p>下面我简单的讲一下这一套架构，CQRS其实就是读写分离，相信了解过数据库的同学不会对这个概念陌生，在分布式数据库中，通常借助读写分离来保证性能，这也是CQRS最常见的应用场景之一；ES则是不保存对象的最新状态，而是保存对象产生的所有事件，通过事件溯源（Event Sourcing，ES）得到对象最新状态。在Redux中，C端采用Event Sourcing的技术，在EventStore中存储事件；Q端存储对象的最新状态，用于提供查询支持。</p><p>ES近年来在并发编程领域应用的也非常多，例如Scala异步编程库Akka，基于Actor异步编程模型结合了ES。这种架构可以避免状态的竞争和锁，以少量的实时性损耗换取了可靠性，不会出现同时更新一个数据的问题。但是现在前端的复杂度还没有达到分布式场景下后端及数据库的程度，所以现在可能还不能去感受到这套架构带来的好处。</p><p>但是Redux借助CQRS+ES，带来的一个直观的好处就是调试工具的使用，相信使用过的同学一定对时光旅行这个功能印象深刻，可以随意的调节得到每个时刻的应用状态。其实现依赖于在Redux中<code>Action</code>就是<code>Event</code>，<code>Reducer</code>就是状态转换，根据初始<code>State</code>和<code>Event</code>记录，可以推算出每一个时刻的状态。</p><p>说了这么多，Redux带来的坏处是什么呢？主要有两点：<br>第一点，在实际的开发中，我们的操作并非都是同步的，几乎是到处充斥着异步操作，而Redux为了保证自身的纯度，把不可靠的异步问题再一次抛给了用户；第二点，JS的数据结构并非天生的不可变，<code>reducer</code>函数为了追求不可变，大量使用<code>Object.assign()</code>来创建新的状态对象（例如下面这段代码，来自Redux文档），所以会产生很多的中间状态变量，带来性能问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          ...state.todos,</span><br><span class="line">          &#123;</span><br><span class="line">            text: action.text,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面两点，第一点社区的解决方案是redux-thunk、redux-saga、redux-observable，第二点则是Immutable.js。</p></li><li><p>redux-thunk，redux-saga，redux-observable<br>这一块其实我不是很熟悉，也没有真正在业务中尝试使用过这些方案，就不献丑了，推荐阅读参考资料里的《Redux Thunk vs Saga vs Observable》，当然也期待有同学能够积极分享自己的经验。</p></li><li><p>Immutable.js<br>Immutable.js事实上是和React一起出来的，只是React的光芒掩盖了Immutable.js，直到Redux引入了性能问题，大家才想到了Immutable.js。其实关于Immutable.js也没啥好介绍的，API看官网即可，其实现则可以参考阅读Clojure的数据结构实现。</p></li></ul><h3 id="Reactive-Programming-响应式编程"><a href="#Reactive-Programming-响应式编程" class="headerlink" title="Reactive Programming 响应式编程"></a>Reactive Programming 响应式编程</h3><p>讲FP牵扯到RP很大的原因是因为大多数场景下RP和FP息息相关着。<br>这一块我还欠缺很多，所以暂时不讲太多。</p><ul><li><p>FRP vs F&amp;RP<br>两者区别在于：FRP是基于时间连续的，RP是基于时间离散的。</p></li><li><p>Rx.js<br>Rx不是FRP，而是F&amp;RP，因为Rx并不强调时间的作用，只是借助了函数式编程的一些思想让API变得更加优雅。<br>为什么我们会需要Rx.js呢？推荐阅读《单页应用的数据流方案探索》</p></li><li><p>Cycle.js<br>循环依赖问题<br>函数不动点模型</p></li><li><p>Elm<br>受Haskell影响<br>影响了Redux</p></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li><a href="http://johnhax.net/2017/stc-vs-ptc/#0" target="_blank" rel="noopener">STC vs PTC</a></li><li><a href="https://zhuanlan.zhihu.com/p/26941235" target="_blank" rel="noopener">[译]All About Recursion, PTC, TCO and STC in JavaScript</a></li></ul><h2 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/26535479" target="_blank" rel="noopener">如何用 JavaScript 实现一个数组惰性求值库</a></li><li><a href="https://zhuanlan.zhihu.com/p/26587745" target="_blank" rel="noopener">js中的Stream实现</a></li></ul><h2 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h2><ul><li><a href="https://martinfowler.com/bliki/CQRS.html" target="_blank" rel="noopener">CQRS</a></li><li><a href="https://github.com/reactjs/redux/issues/351" target="_blank" rel="noopener">Redux and it’s relation to CQRS (and other things)</a></li><li><a href="https://www.slideshare.net/ktoso/akka-persistence-event-sourcing-in-30-minutes" target="_blank" rel="noopener">Akka persistence == event sourcing in 30 minutes</a></li></ul><h2 id="Redux异步解决方案"><a href="#Redux异步解决方案" class="headerlink" title="Redux异步解决方案"></a>Redux异步解决方案</h2><ul><li><a href="http://slides.com/dabit3/deck-11-12#/" target="_blank" rel="noopener">Redux Thunk vs Saga vs Observable</a></li></ul><h2 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h2><ul><li><a href="https://www.zhihu.com/question/53804334" target="_blank" rel="noopener">函数式编程所倡导使用的「不可变数据结构」如何保证性能？</a></li><li><a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="noopener">Understanding Clojure’s Persistent Vectors, pt. 1</a></li><li><a href="http://hypirion.com/musings/understanding-persistent-vector-pt-2" target="_blank" rel="noopener">Understanding Clojure’s Persistent Vectors, pt. 2</a></li><li><a href="http://hypirion.com/musings/understanding-persistent-vector-pt-3" target="_blank" rel="noopener">Understanding Clojure’s Persistent Vectors, pt. 3</a></li></ul><h2 id="Rx"><a href="#Rx" class="headerlink" title="Rx"></a>Rx</h2><ul><li><a href="https://github.com/ReactiveX/reactivex.github.io/issues/130" target="_blank" rel="noopener">Clarify the differences between Functional Reactive Programming and Reactive Extensions</a></li><li><a href="https://zhuanlan.zhihu.com/p/23331432" target="_blank" rel="noopener">Hello RxJS</a></li></ul><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><ul><li><a href="https://www.zhihu.com/question/59871249/answer/170400954" target="_blank" rel="noopener">前端开发js函数式编程真实用途体现在哪里？</a></li><li><a href="https://zhuanlan.zhihu.com/p/24076438" target="_blank" rel="noopener">为什么说 JavaScript 不擅长函数式编程</a></li><li><a href="https://zhuanlan.zhihu.com/p/26426054" target="_blank" rel="noopener">单页应用的数据流方案探索</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：这个其实是我最近打算在在团队做的一个分享，这个分享将会聊聊函数式编程在前端的一些成熟的应用以及尝试。&lt;br&gt;
    
    </summary>
    
      <category term="FP" scheme="https://blog.daraw.cn/categories/FP/"/>
    
    
      <category term="FP" scheme="https://blog.daraw.cn/tags/FP/"/>
    
      <category term="React" scheme="https://blog.daraw.cn/tags/React/"/>
    
      <category term="Redux" scheme="https://blog.daraw.cn/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>多说一句再见</title>
    <link href="https://blog.daraw.cn/2017/03/23/goodbye-duoshuo/"/>
    <id>https://blog.daraw.cn/2017/03/23/goodbye-duoshuo/</id>
    <published>2017-03-23T20:01:15.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。 我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。 对此给您造成的不便，我们深表歉意，感谢您的一路相伴。</p></blockquote><p>从博客搭建好以来一直使用着多说作为评论系统，虽然多说有着不少的黑点，比如上了HTTPS后失去地址栏绿锁，也听说过多说有各种各样的bug，服务器故障导致评论框不出现更是没少见过，不过以后再也不能黑多说了。<br><a id="more"></a></p><p>由于不是很想再去使用国内其他的评论系统了，博客近期也没有迁移到非静态的博客系统的计划，所以把评论系统换成了Disqus。至于GFW的问题，我觉得科学上网是一个程序员必备的技能，Disqus被墙不应该会影响本博客的访客们。  </p><p>另外可能是多说导出数据的格式的问题，在迁移到Disqus的过程中一直没法把转好的数据导入Disqus，所以很遗憾以前的评论都丢失了，最近也比较忙，过阵子闲下来我再尝试看看能不能把数据找回来。  </p><p>感谢多说这一年半的陪伴，也感谢曾经在博客留言的朋友们。<br>如果可以，我还是很乐意为多说团队买一杯咖啡的。  </p><p>最后，再多说一句再见！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。 我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。 对此给您造成的不便，我们深表歉意，感谢您的一路相伴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从博客搭建好以来一直使用着多说作为评论系统，虽然多说有着不少的黑点，比如上了HTTPS后失去地址栏绿锁，也听说过多说有各种各样的bug，服务器故障导致评论框不出现更是没少见过，不过以后再也不能黑多说了。&lt;br&gt;
    
    </summary>
    
    
      <category term="多说" scheme="https://blog.daraw.cn/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>Vue响应式原理之Watcher</title>
    <link href="https://blog.daraw.cn/2017/03/17/vue-watcher/"/>
    <id>https://blog.daraw.cn/2017/03/17/vue-watcher/</id>
    <published>2017-03-17T22:59:15.000Z</published>
    <updated>2018-03-25T14:58:12.478Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看Vue的响应式原理时明白了Vue的一些具体的优化手段，在一个数据被操作2次的时候DOM并不会一定跟着修改2次，正常情况下只有一次的修改。<br>首先Vue响应式原理的大概内容是借助<code>getter</code>和<code>setter</code>来劫持数据的变动的，之前我也曾经写过一篇文章来分析数据绑定的几种实现（<a href="https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/">如何监听JS变量的变化</a>），但是最近稍微深入了解了Vue的实现原理后发现Vue其实是要比想象中实现的巧妙多了。<br><a id="more"></a><br>在阅读<a href="https://juejin.im/entry/5834992667f356006c395b31" target="_blank" rel="noopener">Vue 源码解析：深入响应式原理</a>的时候，明白了Vue在<code>getter</code>中收集变量的依赖，在<code>setter</code>中通知变量的变化。Vue的内部并不是简单粗暴的把监测钩子插在<code>setter</code>和<code>getter</code>中，而是巧妙的使用了观察者模式（Pub/Sub）,<code>Dep</code>就是其实现。而模版中的指令和数值检测的绑定则通过<code>Watcher</code>来完成，每个被监测的变量会被分配一个<code>Watcher</code>，每个<code>Watcher</code>都有一个<code>id</code>来做去重。<br>在被检测的数值发生变化时，<code>setter</code>中通过<code>dep.notify</code>来发布通知，通知所有的<code>Watcher</code>实例调用<code>update</code>方法，而在大多数情况下，<code>Watcher</code>实例调用<code>update</code>又会把自身放入一个队列中，在下一次事件循环中执行<code>flushSchedulerQueue</code>来一起更新。这一块是用自定义的<code>nextTick</code>函数来做的，这个函数的实现已经有很多的文章进行的讲解，知乎上也有过讨论，这里不再赘述。<br>这个时候我产生了一个很智障的想法，既然每个被监测的变量对应了一个<code>Watcher</code>实例，那么假设<code>vm</code>上有一个值<code>x</code>，初始值为<code>1</code>，<code>vm.x++</code>连续同步执行两次，第一次执行的时候其<code>Watcher</code>实例被推入了更新队列中，第二次的时候在<code>queueWatcher</code>中是有一个<code>has</code>对象当作<code>Map</code>来使用，判断是否已经存在<code>id</code>对应的对象来决定要不要推入队列的，<code>vm.x</code>的<code>Watcher</code>已经被推入过一次，是不会再次被推入的，那么第二次变动是不是会被直接忽略？直觉告诉我<code>Vue</code>肯定不会犯这种低级错误啊！然而这块的代码其实还是有点绕的，虽然读懂了大概的流程，但是有的细节处理不是一时半会儿就能直接理解的。<br>晚上刷知乎的时候看到了一个高赞回答，讲的是如何使用Chrome的断点调试功能查看<code>React</code>的<code>this.setState</code>背后发生了什么，我突然想到既然自己看代码不能理解，那么打断点跑一下不就好了！<br>在Chrome中打断点跑了一遍后我突然想明白过来了，事实上<code>vm</code>上的变量和<code>DOM</code>上的展示并不是完全实时映射的啊，在<code>vm.x++</code>第一次执行后<code>vm.x</code>就已经被认为是脏的了，下一次清空<code>watcher</code>队列的时候他肯定是会进行处理的的，而这个时候，<code>vm.x</code>的值已经是<code>2</code>了；在执行完第二次的自增操作后，<code>vm.x</code>的值变成了<code>3</code>，这时候如果主线程中没有其他的操作（这一轮<code>EventLoop</code>的<code>Macrotask</code>队列已经清空了），就会去清空<code>Watcher</code>实例队列，而这时候<code>DOM</code>才会更新到<code>vm.x</code>的值所对应的样子。  </p><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>上面的解释是基于<code>Vue2.2.1</code>来分析的，的这里再做一个大胆的猜测，不过我还没有去看源码来验证，<code>Vue2</code>在加入虚拟DOM后，除了能够让Weex和SSR这些多端渲染的实现变得更加容易外，其实也是能够有一定的优化的，假设<code>vm.x++</code>后紧跟一个<code>vm.x--</code>，<code>x</code>虽然是脏的了，但是<code>x</code>并没有发生什么变动，那么可以在V DOM在Diff的时候会把<code>x</code>对应的依赖的DOM修改忽略掉，兼具了依赖收集和虚拟DOM的优点，当然也会付出依赖收集和虚拟DOM的内存占用和计算的成本。</p><h3 id="参考资料-amp-推荐阅读"><a href="#参考资料-amp-推荐阅读" class="headerlink" title="参考资料&amp;推荐阅读"></a>参考资料&amp;推荐阅读</h3><ul><li><a href="https://juejin.im/entry/5834992667f356006c395b31" target="_blank" rel="noopener">Vue 源码解析：深入响应式原理</a></li><li><a href="https://www.zhihu.com/question/55364497" target="_blank" rel="noopener">Vue 中如何使用 MutationObserver 做批量处理？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看Vue的响应式原理时明白了Vue的一些具体的优化手段，在一个数据被操作2次的时候DOM并不会一定跟着修改2次，正常情况下只有一次的修改。&lt;br&gt;首先Vue响应式原理的大概内容是借助&lt;code&gt;getter&lt;/code&gt;和&lt;code&gt;setter&lt;/code&gt;来劫持数据的变动的，之前我也曾经写过一篇文章来分析数据绑定的几种实现（&lt;a href=&quot;https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/&quot;&gt;如何监听JS变量的变化&lt;/a&gt;），但是最近稍微深入了解了Vue的实现原理后发现Vue其实是要比想象中实现的巧妙多了。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="https://blog.daraw.cn/tags/Vue/"/>
    
      <category term="Watcher" scheme="https://blog.daraw.cn/tags/Watcher/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的JS上卷》阅读小记之匿名函数问题</title>
    <link href="https://blog.daraw.cn/2017/02/20/notes-about-you-dont-know-js-anonymous-function/"/>
    <id>https://blog.daraw.cn/2017/02/20/notes-about-you-dont-know-js-anonymous-function/</id>
    <published>2017-02-20T19:48:52.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匿名函数的问题"><a href="#匿名函数的问题" class="headerlink" title="匿名函数的问题"></a>匿名函数的问题</h2><p>在第一部分<code>3.3.1匿名与具名</code>一节中，作者提到了匿名函数的三个缺点并给了一个最佳实践，三个缺点分别是调试时栈追踪看不到有意义的函数名带来麻烦，引用自身时只能使用过期的<code>arguments.callee</code>并举了两个例子回调和事件监听器触发后解绑自身，代码可读性；最佳实践是说始终传入具名函数，给函数表达式一个函数名。  </p><a id="more"></a><p>关于缺点三和最佳实践我觉得没什么问题；缺点一只要不是变态的多层嵌套，debug工具的栈追踪还是能比较清楚的理解的；问题出在了缺点二：<br>Talk is cheap, 直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="function"><span class="params">g</span> =&gt;</span></span><br><span class="line">    (<span class="function"><span class="params">f</span>=&gt;</span>f(f))(</span><br><span class="line">        self =&gt;</span><br><span class="line">            g( <span class="function">(<span class="params">...args</span>)=&gt;</span>self(self)(...args) )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = y(<span class="function"><span class="params">self</span> =&gt;</span></span><br><span class="line">    n =&gt; n &lt; <span class="number">0</span> ? <span class="number">0</span> : n + self(n<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">f(<span class="number">100</span>); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure><p>这段代码来自Winter的Gist(<a href="https://gist.github.com/wintercn/7d06dd226d699c832b6a" target="_blank" rel="noopener">ycombinator in es2015<br>Raw</a>)，y函数有一个名字叫做Y Combinator。是不是有种黑魔法的感觉？  </p><p>关于Y组合子网上已经有一大堆科普文，如果对于它的推导过程感兴趣可以参考<a href="http://blog.csdn.net/voidccc/article/details/39143733" target="_blank" rel="noopener">Javascript推导Y-Combinator</a>。Y组合子的的精髓就是在于函数不动点：<code>g(f) = f</code>，高阶函数<code>g</code>传入一个函数<code>f</code>还会得到<code>f</code>。  </p><p>Y组合子是Lambda演算的一部分，也是函数式编程的理论基础，在没有赋值语句的前提下定义递归的匿名函数。在实际开发中其实并没有太大用处，敢在业务代码里写上面的YC的估计都被打死了吧hhhhh，实际开发中还是建议遵循书中的建议比较好一点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90" target="_blank" rel="noopener">不动点组合子 - 维基百科，自由的百科全书</a></li><li><a href="http://codedocker.com/anonymous-function-recursion-in-javascript/" target="_blank" rel="noopener">Javascript中匿名函数的递归调用</a></li><li><a href="http://blog.csdn.net/voidccc/article/details/39143733" target="_blank" rel="noopener">Javascript推导Y-Combinator</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;匿名函数的问题&quot;&gt;&lt;a href=&quot;#匿名函数的问题&quot; class=&quot;headerlink&quot; title=&quot;匿名函数的问题&quot;&gt;&lt;/a&gt;匿名函数的问题&lt;/h2&gt;&lt;p&gt;在第一部分&lt;code&gt;3.3.1匿名与具名&lt;/code&gt;一节中，作者提到了匿名函数的三个缺点并给了一个最佳实践，三个缺点分别是调试时栈追踪看不到有意义的函数名带来麻烦，引用自身时只能使用过期的&lt;code&gt;arguments.callee&lt;/code&gt;并举了两个例子回调和事件监听器触发后解绑自身，代码可读性；最佳实践是说始终传入具名函数，给函数表达式一个函数名。  &lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的JS上卷》阅读小记之setTimeout的this指向问题</title>
    <link href="https://blog.daraw.cn/2017/02/19/notes-about-you-dont-know-js-settimeout-this/"/>
    <id>https://blog.daraw.cn/2017/02/19/notes-about-you-dont-know-js-settimeout-this/</id>
    <published>2017-02-19T10:10:05.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>这几天翻看了下被传的神乎其神的《你不知道的JS》这本书，其实以前就看过一次，不过当时的level并不高，而且感觉这本书讲的有点绕，所以看了一点就没坚持下去。<br>这次翻看感觉还是比较轻松的，有些地方写的很好，有的地方还是感觉讲的有点绕（可能是翻译的问题），但总的来说这本书还是很不错的，基本都是JS中有坑、新手难以理解的点，简直就是《JS：The Bad Parts》（哈，开个玩笑~）。<br>这个小记不是打算记录书中内容的笔记，而是想补充纠正书中的讲的不完善的地方。<br><a id="more"></a></p><h2 id="this的问题"><a href="#this的问题" class="headerlink" title="this的问题"></a>this的问题</h2><p>在第二部分<code>2.2.2隐式绑定</code>一节中，提到了<code>setTimeout</code>的传入函数this的问题，书里说传入回调函数在执行的时候<code>context</code>为全局对象，所以<code>this</code>指向了全局对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><p>在Chrome56中测试上面的一段代码确实输出为<code>window</code>全局对象，符合书中的描述，然而如果你在Node.js中测试这段代码你会发现输出是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop  node -v</span><br><span class="line">v6.8.1</span><br><span class="line">➜  Desktop  node test.js</span><br><span class="line">Timeout &#123;</span><br><span class="line">  _called: true,</span><br><span class="line">  _idleTimeout: 200,</span><br><span class="line">  _idlePrev: null,</span><br><span class="line">  _idleNext: null,</span><br><span class="line">  _idleStart: 94,</span><br><span class="line">  _onTimeout: [Function],</span><br><span class="line">  _timerArgs: undefined,</span><br><span class="line">  _repeat: null &#125;</span><br></pre></td></tr></table></figure></p><p>What? 输出的是一个Timeout实例对象！<br>打开node的源码，在<code>node\timers.js</code>中有着<code>setTimeout</code>的实现，这里大概的讲一下，有兴趣的可以自己再去看看代码：<br>有一个<code>Timeout</code>构造函数，用来构造定时器对象，用一个链表存着所有的<code>Timeout</code>的实例对象，也就是每次执行暴露出来的<code>setTimeout</code>都会在链表中插入一个<code>Timeout</code>实例<code>timer</code>。下面是<code>Timeout</code>构造函数的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timeout</span>(<span class="params">after, callback, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._called = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>._idleTimeout = after;</span><br><span class="line">  <span class="keyword">this</span>._idlePrev = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>._idleNext = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>._idleStart = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>._onTimeout = callback;</span><br><span class="line">  <span class="keyword">this</span>._timerArgs = args;</span><br><span class="line">  <span class="keyword">this</span>._repeat = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定时的部分<code>TimerWrap</code>则由C++来做处理，这里不是现在我们关注的关键点也脱离了JS的范畴暂且不细谈，在定时结束后，通过<code>ontimeout</code>函数来处理<code>timer</code>对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ontimeout</span>(<span class="params">timer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = timer._timerArgs;</span><br><span class="line">  <span class="keyword">var</span> callback = timer._onTimeout;</span><br><span class="line">  <span class="keyword">if</span> (!args)</span><br><span class="line">    callback.call(timer);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (args.length) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        callback.call(timer, args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        callback.call(timer, args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        callback.call(timer, args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        callback.apply(timer, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (timer._repeat)</span><br><span class="line">    rearm(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ontimeout</code>函数中正藏着<code>this</code>指向问题的真相：<code>callback.call(timer, ...)</code>。  </p><p>在JS中，<code>setTimeout</code>应该是属于<code>Event Loop</code>的<code>Macro Tasks</code>，与<code>I/O</code>等<code>Tasks</code>同等级，在浏览器中有<code>Web APIs</code>规范来定义这部分的实现，node没有（或者是我没找到，还请告知）。但我大概翻了下<code>Web APIs</code>的规范，也没有找到对<code>this</code> <code>context</code> 的规定。虽然不理解为什么node这样做，但是好歹也找出了与Chrome浏览器不同的原因。  </p><p>所以，关于<code>setTimeout</code>传入函数的<code>this</code>，我的建议是即使你写的代码只会在浏览器里运行，也最好不要依赖<code>this</code>会自动绑定到全局对象上去，而是应该手动借助<code>bind</code>绑定。当然使用ES6的箭头函数是没什么问题的，因为没有创建新的<code>context</code>，<code>this</code>都会毫无疑问的绑定在当前的<code>context</code>上：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> == that) <span class="comment">// true</span></span><br><span class="line">&#125;, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天翻看了下被传的神乎其神的《你不知道的JS》这本书，其实以前就看过一次，不过当时的level并不高，而且感觉这本书讲的有点绕，所以看了一点就没坚持下去。&lt;br&gt;这次翻看感觉还是比较轻松的，有些地方写的很好，有的地方还是感觉讲的有点绕（可能是翻译的问题），但总的来说这本书还是很不错的，基本都是JS中有坑、新手难以理解的点，简直就是《JS：The Bad Parts》（哈，开个玩笑~）。&lt;br&gt;这个小记不是打算记录书中内容的笔记，而是想补充纠正书中的讲的不完善的地方。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6实现内部类的写法</title>
    <link href="https://blog.daraw.cn/2017/01/17/es6-static-class/"/>
    <id>https://blog.daraw.cn/2017/01/17/es6-static-class/</id>
    <published>2017-01-17T16:55:15.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>最近在把 <code>JIris</code> 移植到JS平台 <code>Iris.js</code> 的过程中不断的在Java和JS两种语言之间切换，ES6的 <code>Class</code> 某种程度来说可以写出更加优雅的代码，而不用去管背后的原型实现。但是不得不说有一个遗憾就是 ES6 虽然支持了静态方法，但是还不支持静态属性和静态类，于是仔细观察了下发现了几种ES6实现静态类的相对优雅的写法。<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>简化一个Demo，先是 Java 的写法：<br><strong> IrisValue.java </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IrisValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IrisValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> test = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> test;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            test = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IrisValue irisValue = <span class="keyword">new</span> IrisValue(<span class="number">10</span>);</span><br><span class="line">        IrisValue irisValue2 = <span class="keyword">new</span> IrisValue(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        irisValue.setValue(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(irisValue.getValue());</span><br><span class="line">        System.out.println(irisValue2.getValue());</span><br><span class="line"></span><br><span class="line">        Test testValue = <span class="keyword">new</span> Test();</span><br><span class="line">        Test testValue2 = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">        System.out.println(testValue.getTest());</span><br><span class="line">        System.out.println(testValue2.getTest());</span><br><span class="line">        testValue.setTest(<span class="number">9</span>);</span><br><span class="line">        testValue2.setTest(<span class="number">99</span>);</span><br><span class="line">        System.out.println(testValue.getTest());</span><br><span class="line">        System.out.println(testValue2.getTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Test</code> 是<code>IrisValue</code>类的静态方法，并不属于<code>IrisValue</code>的实例对象。上面代码执行结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">10</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">99</span><br></pre></td></tr></table></figure></p><p>那么等同的JS代码应该怎么写呢？<br>ES6的Class本质还是函数，所以有一个很容易想到的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IrisValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get value() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set value(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.mTest = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get test() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mTest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set test(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mTest = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IrisValue.Test = Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> irisValue = <span class="keyword">new</span> IrisValue(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> irisValue2 = <span class="keyword">new</span> IrisValue(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">irisValue.value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(irisValue.value);</span><br><span class="line"><span class="built_in">console</span>.log(irisValue2.value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testValue = <span class="keyword">new</span> IrisValue.Test();</span><br><span class="line"><span class="keyword">let</span> testValue2 = <span class="keyword">new</span> IrisValue.Test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testValue.test);</span><br><span class="line"><span class="built_in">console</span>.log(testValue2.test);</span><br><span class="line">testValue.test = <span class="number">9</span>;</span><br><span class="line">testValue2.test = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(testValue.test);</span><br><span class="line"><span class="built_in">console</span>.log(testValue2.test);</span><br></pre></td></tr></table></figure></p><p>输出结果和上面Java（预想的）一样，静态属性目前也能这样实现。  </p><p>但是不要忘了<code>get/set</code>函数，所以应该有更加优雅的静态类和静态属性的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IrisValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get value() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set value(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> get Test() &#123;</span><br><span class="line">    <span class="keyword">return</span> Test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.mTest = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get test() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mTest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set test(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mTest = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实我们还能再<del>优雅</del>一点～<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IrisValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get value() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set value(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mValue = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> get Test() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">            <span class="keyword">constructor</span>() &#123;</span><br><span class="line">                <span class="keyword">this</span>.mTest = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            get test() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.mTest;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            set test(value) &#123;</span><br><span class="line">                <span class="keyword">this</span>.mTest = value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实上面的这些写法还是不够优雅，避免不了的牺牲了可读性。既然ES6已经引进了Class，期待以后能和Java一样去写静态类和静态属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在把 &lt;code&gt;JIris&lt;/code&gt; 移植到JS平台 &lt;code&gt;Iris.js&lt;/code&gt; 的过程中不断的在Java和JS两种语言之间切换，ES6的 &lt;code&gt;Class&lt;/code&gt; 某种程度来说可以写出更加优雅的代码，而不用去管背后的原型实现。但是不得不说有一个遗憾就是 ES6 虽然支持了静态方法，但是还不支持静态属性和静态类，于是仔细观察了下发现了几种ES6实现静态类的相对优雅的写法。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="ES6" scheme="https://blog.daraw.cn/tags/ES6/"/>
    
      <category term="Class" scheme="https://blog.daraw.cn/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA在Linux下字体不正常解决方案</title>
    <link href="https://blog.daraw.cn/2016/11/24/intellij-idea-ugly-font-linux/"/>
    <id>https://blog.daraw.cn/2016/11/24/intellij-idea-ugly-font-linux/</id>
    <published>2016-11-24T20:34:15.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>之前遇到了一件奇怪的事，WebStorm中字体正常，IDEA直接导入WebStorm的设置备份也还是不行，如图所示。<br><a id="more"></a><br><img src="http://ww1.sinaimg.cn/large/005KE4htgw1f9hf9q1cy0j31hc0u0181.jpg" alt=""></p><p>本来这事也就放着不管了，昨天和Shaoxing聊天提到了这事，他提醒我正常情况下IDEA系列应该都是自带JDK的，于是我查了一下IDEA有带和不带JDK两个版本，自带JDK的会针对HiDPI和字体做一些优化。  </p><p>我打开了WS和IDEA进行对比，发现他们的About信息中的JVM版本果然不一样：<br><img src="http://ww1.sinaimg.cn/large/005KE4htgw1fa3hgndesmj30hy0b6q6l.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/mw690/005KE4htgw1fa3hgo3t08j30ia0bkae3.jpg" alt="">  </p><p>在IDEA的设置里手动切换了JVM版本后IDEA会自动重启，然而并没什么卵用，重启后JVM又回到了Oracle版本。<br>我突然想起曾经在环境变量中配置过<code>IDEA_JDK</code>，于是删除了这个变量，在终端中输出这个变量已经不存在，然而还是不行。  </p><p>这时看到官网说可以在<code>idea.sh</code>中手动添加<code>IDEA_JDK</code>变量，于是我打开了<code>idea.sh</code>，其中60行往后为关键点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Locate a JDK installation directory which will be used to run the IDE.</span></span><br><span class="line"><span class="comment"># Try (in order): IDEA_JDK, idea.jdk, ../jre, JDK_HOME, JAVA_HOME, "java" in PATH.</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$IDEA_JDK</span>"</span> -a -x <span class="string">"<span class="variable">$IDEA_JDK</span>/bin/java"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$IDEA_JDK</span>"</span></span><br><span class="line"><span class="keyword">elif</span> [ -s <span class="string">"<span class="variable">$HOME</span>/.IntelliJIdea2016.3/config/idea.jdk"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JDK=`<span class="string">"<span class="variable">$CAT</span>"</span> <span class="variable">$HOME</span>/.IntelliJIdea2016.3/config/idea.jdk`</span><br><span class="line">  <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$JDK</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    JDK=<span class="string">"<span class="variable">$IDE_HOME</span>/<span class="variable">$JDK</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">elif</span> [ -x <span class="string">"<span class="variable">$IDE_HOME</span>/jre/jre/bin/java"</span> ] &amp;&amp; <span class="string">"<span class="variable">$IDE_HOME</span>/jre/jre/bin/java"</span> -version &gt; /dev/null 2&gt;&amp;1 ; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$IDE_HOME</span>/jre"</span></span><br><span class="line"><span class="keyword">elif</span> [ -n <span class="string">"<span class="variable">$JDK_HOME</span>"</span> -a -x <span class="string">"<span class="variable">$JDK_HOME</span>/bin/java"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$JDK_HOME</span>"</span></span><br><span class="line"><span class="keyword">elif</span> [ -n <span class="string">"<span class="variable">$JAVA_HOME</span>"</span> -a -x <span class="string">"<span class="variable">$JAVA_HOME</span>/bin/java"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$JAVA_HOME</span>"</span></span><br></pre></td></tr></table></figure><p>后面的代码省去，虽然没学过<code>shell</code>，但很明显查找JDK的流程为先查看环境变量有没有<code>IDEA_JDK</code>变量，如果没有再去看配置信息里有没有设置<code>idea.jdk</code>，如果没有再去找IDE的目录里自带的JDK。<br>所以解决方法很简单了，把上面的流程注释掉，直接去IDE的目录下找自带的JDK：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Locate a JDK installation directory which will be used to run the IDE.</span></span><br><span class="line"><span class="comment"># Try (in order): IDEA_JDK, idea.jdk, ../jre, JDK_HOME, JAVA_HOME, "java" in PATH.</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># if [ -n "$IDEA_JDK" -a -x "$IDEA_JDK/bin/java" ]; then</span></span><br><span class="line"><span class="comment">#   JDK="$IDEA_JDK"</span></span><br><span class="line"><span class="comment"># elif [ -s "$HOME/.IntelliJIdea2016.3/config/idea.jdk" ]; then</span></span><br><span class="line"><span class="comment">#   JDK=`"$CAT" $HOME/.IntelliJIdea2016.3/config/idea.jdk`</span></span><br><span class="line"><span class="comment">#   if [ ! -d "$JDK" ]; then</span></span><br><span class="line"><span class="comment">#     JDK="$IDE_HOME/$JDK"</span></span><br><span class="line"><span class="comment">#   fi</span></span><br><span class="line"><span class="comment"># elif [ -x "$IDE_HOME/jre/jre/bin/java" ] &amp;&amp; "$IDE_HOME/jre/jre/bin/java" -version &gt; /dev/null 2&gt;&amp;1 ; then</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="string">"<span class="variable">$IDE_HOME</span>/jre/jre/bin/java"</span> ] &amp;&amp; <span class="string">"<span class="variable">$IDE_HOME</span>/jre/jre/bin/java"</span> -version &gt; /dev/null 2&gt;&amp;1 ; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$IDE_HOME</span>/jre"</span></span><br><span class="line"><span class="keyword">elif</span> [ -n <span class="string">"<span class="variable">$JDK_HOME</span>"</span> -a -x <span class="string">"<span class="variable">$JDK_HOME</span>/bin/java"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$JDK_HOME</span>"</span></span><br><span class="line"><span class="keyword">elif</span> [ -n <span class="string">"<span class="variable">$JAVA_HOME</span>"</span> -a -x <span class="string">"<span class="variable">$JAVA_HOME</span>/bin/java"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JDK=<span class="string">"<span class="variable">$JAVA_HOME</span>"</span></span><br></pre></td></tr></table></figure></p><p>保存后打开IDEA，果然一切都正常了，About信息中也显示使用了自带的JDK。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前遇到了一件奇怪的事，WebStorm中字体正常，IDEA直接导入WebStorm的设置备份也还是不行，如图所示。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.daraw.cn/categories/Linux/"/>
    
    
      <category term="Intellij IDEA" scheme="https://blog.daraw.cn/tags/Intellij-IDEA/"/>
    
      <category term="Linux" scheme="https://blog.daraw.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>node-thunkify源码阅读笔记</title>
    <link href="https://blog.daraw.cn/2016/11/11/notes-about-node-thunkify/"/>
    <id>https://blog.daraw.cn/2016/11/11/notes-about-node-thunkify/</id>
    <published>2016-11-11T16:00:15.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>Node7发布后已经可以通过添加<code>--harmony-async-await</code>的参数调用来直接支持<code>async/await</code>语法了，据说Node8还会进一步推进其发展，于是研究了一下JS的异步流程控制和下一代Node Web框架<code>Koa2</code>。  </p><p>关于<code>generator</code> <code>async/await</code>的发展史已有一大堆文章讲过了，这里不再赘述。<br>tj的<code>co</code>是<code>Koa2</code>上个大版本<code>Koa1</code>的核心，在没有<code>async/await</code>的时候一般会借助<code>co</code>来做自动流程控制。关于<code>co</code>的源码分析文章也有很多，代码不长值得一读，参考了一些分析文章也算是了解了其逻辑和思路。</p><p>在<code>co</code>中出现了一个<code>thunkToPromise</code>的函数，一些文章都跳过了这个并表示<code>thunk</code>函数已经没什么意义了，但本着好奇心读了阮一峰的<a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="noopener">Thunk 函数的含义和用法</a>，文中一个地方一时没有搞懂，故写此文记录一下。<br><a id="more"></a></p><p><code>thunkify</code>的<a href="https://github.com/tj/node-thunkify/blob/master/index.js" target="_blank" rel="noopener">代码</a>很少，就是一个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkify</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  assert(<span class="string">'function'</span> == <span class="keyword">typeof</span> fn, <span class="string">'function required'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length);</span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; ++i) &#123;</span><br><span class="line">      args[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> called;</span><br><span class="line"></span><br><span class="line">      args.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">        called = <span class="literal">true</span>;</span><br><span class="line">        done.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        fn.apply(ctx, args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        done(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Demo：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b, callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = a + b;</span><br><span class="line">  callback(sum);</span><br><span class="line">  callback(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ft = thunkify(f);</span><br><span class="line">ft(<span class="number">1</span>, <span class="number">2</span>)(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>让我一时没有搞懂的是为什么借助<code>called</code>标记能够确保回调函数只执行一次，借助VS Code的断点调试把文中示例的代码跑了一遍总算搞懂了：  </p><p>Demo中首先真正执行的是<code>thunkify(f)</code>，<code>f</code>函数传入<code>thunkify</code>后直接返回了一个闭包，这里称之为闭包1，闭包1被赋值给了ft，ft即为闭包1的一个引用。<br>接着执行的是<code>ft(1, 2)</code>，<code>ft</code>中传入了<code>(1, 2)</code>来执行，<code>ft</code>中将<code>duck type</code>的伪数组<code>arguments</code>保存为一个真实数组<code>args</code>，所以此时<code>args</code>数组中有两个成员即<code>1</code>和<code>2</code>，<code>ft</code>最后又返回了一个闭包，这里称之为闭包2。<br>接着执行的是<code>ft(1, 2)(console.log)</code>，也就是将<code>console.log</code>传入闭包2来执行，传入的<code>console.log</code>即形参<code>done</code>其实就是一开始<code>f</code>的回调函数，这时候重点来了，在闭包2中增加了一个标记<code>called</code>来记录回调是否执行过一次了，而<code>push</code>进<code>args</code>数组的函数则已经不是单纯的回调，而是被包裹了原回调、保证只会执行一次的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">  called = <span class="literal">true</span>;</span><br><span class="line">  done.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后执行的就是<code>fn.apply(ctx, args)</code>，而<code>thunkify</code>函数的形参<code>fn</code>对应的就是一开始传入的<code>f</code>函数，所以总的看来，真正执行的还是最初的<code>f</code>函数，而被改变的是传入的回调，回调被包裹了一层，借助<code>called</code>标记来保证只会被执行一次，执行过后<code>called</code>标记被改变，不再会被执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node7发布后已经可以通过添加&lt;code&gt;--harmony-async-await&lt;/code&gt;的参数调用来直接支持&lt;code&gt;async/await&lt;/code&gt;语法了，据说Node8还会进一步推进其发展，于是研究了一下JS的异步流程控制和下一代Node Web框架&lt;code&gt;Koa2&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;generator&lt;/code&gt; &lt;code&gt;async/await&lt;/code&gt;的发展史已有一大堆文章讲过了，这里不再赘述。&lt;br&gt;tj的&lt;code&gt;co&lt;/code&gt;是&lt;code&gt;Koa2&lt;/code&gt;上个大版本&lt;code&gt;Koa1&lt;/code&gt;的核心，在没有&lt;code&gt;async/await&lt;/code&gt;的时候一般会借助&lt;code&gt;co&lt;/code&gt;来做自动流程控制。关于&lt;code&gt;co&lt;/code&gt;的源码分析文章也有很多，代码不长值得一读，参考了一些分析文章也算是了解了其逻辑和思路。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;co&lt;/code&gt;中出现了一个&lt;code&gt;thunkToPromise&lt;/code&gt;的函数，一些文章都跳过了这个并表示&lt;code&gt;thunk&lt;/code&gt;函数已经没什么意义了，但本着好奇心读了阮一峰的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/05/thunk.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Thunk 函数的含义和用法&lt;/a&gt;，文中一个地方一时没有搞懂，故写此文记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="thunkify" scheme="https://blog.daraw.cn/tags/thunkify/"/>
    
  </entry>
  
  <entry>
    <title>vuex2中使用mapGetters/mapActions报错解决方法</title>
    <link href="https://blog.daraw.cn/2016/09/22/vuex2-problems-with-mapgetter/"/>
    <id>https://blog.daraw.cn/2016/09/22/vuex2-problems-with-mapgetter/</id>
    <published>2016-09-22T00:00:00.000Z</published>
    <updated>2018-03-25T14:58:12.478Z</updated>
    
    <content type="html"><![CDATA[<p>在尝鲜vuex2时，发现vuex2增加了<code>mapGetters</code>和<code>mapActions</code>的方法，借助stage2的<code>Object Rest Operator</code>特性,可以写出下面代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  marked,</span><br><span class="line">  ...mapActions([</span><br><span class="line">    <span class="string">'getArticles'</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是在借助babel编译转换时发生了报错：<code>BabelLoaderError: SyntaxError: Unexpected token</code>。</p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在vuex的repo issues中有人提过这样的问题，后来是修改了eslint配置中对<code>Object Rest Operator</code>的支持解决了问题，然而我根本没有使用eslint。<br>接着在babel的issues中搜索这样的报错，原来是我babel预置的转换器是<code>babel-preset-es2015</code>，并不能转换<code>Object Rest Operator</code>特性。<br>解决方法很简单了，可以安装整个stage2的预置器或者安装<code>Object Rest Operator</code>的babel插件<code>babel-plugin-transform-object-rest-spread</code>。<br>我选择了安装插件，接着在babel的配置文件<code>.babelrc</code>中应用插件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"es2015"</span>, &#123; <span class="string">"modules"</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-object-rest-spread"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启webpack，就不会再有报错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在尝鲜vuex2时，发现vuex2增加了&lt;code&gt;mapGetters&lt;/code&gt;和&lt;code&gt;mapActions&lt;/code&gt;的方法，借助stage2的&lt;code&gt;Object Rest Operator&lt;/code&gt;特性,可以写出下面代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;methods: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  marked,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...mapActions([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;getArticles&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是在借助babel编译转换时发生了报错：&lt;code&gt;BabelLoaderError: SyntaxError: Unexpected token&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuex2" scheme="https://blog.daraw.cn/tags/vuex2/"/>
    
  </entry>
  
  <entry>
    <title>如何监听JS变量的变化</title>
    <link href="https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/"/>
    <id>https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/</id>
    <published>2016-08-17T13:48:39.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.zhihu.com/question/44724640" target="_blank" rel="noopener">如何监听 js 中变量的变化?</a><br>我现在有这样一个需求，需要监控js的某个变量的改变，如果该变量发生变化，则触发一些事件，不能使用timeinterval之类的定时去监控的方法，不知道有比较好的解决方案么？</p></blockquote><p>这个问题问的很好。  </p><p>流行的MVVM的JS库/框架都有共同的特点就是数据绑定，在数据变更后响应式的自动进行相关计算并变更DOM展现。所以这个问题也可以理解为<strong>如何实现MVVM库/框架的数据绑定</strong>。  </p><p>常见的数据绑定的实现有脏值检测，基于ES5的<code>getter</code>和<code>setter</code>，以及ES已被废弃的<code>Object.observe</code>，和ES6中添加的<code>Proxy</code>。<br><a id="more"></a></p><h2 id="脏值检测"><a href="#脏值检测" class="headerlink" title="脏值检测"></a>脏值检测</h2><p>angular使用的就是脏值检测，原理是比较新值和旧值，当值真的发生改变时再去更改DOM，所以angular中有一个<code>$digest</code>。那么为什么在像<code>ng-click</code>这样的内置指令在触发后会自动变更呢？原理也很简单，在<code>ng-click</code>这样的内置指令中最后追加了<code>$digest</code>。  </p><p>简易的实现一个脏值检测：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>two-way binding<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"inc"</span>&gt;</span></span><br><span class="line">            Increase</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">            Reset</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red"</span> <span class="attr">ng-bind</span>=<span class="string">"counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:blue"</span> <span class="attr">ng-bind</span>=<span class="string">"counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:green"</span> <span class="attr">ng-bind</span>=<span class="string">"counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 数据模型区开始 */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> counter = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">inc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                counter++;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                counter = 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 数据模型区结束 */</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 绑定关系区开始 */</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                bind();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">"[ng-click]"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    list[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>[list[index].getAttribute(<span class="string">"ng-click"</span>)]();</span></span><br><span class="line"><span class="undefined">                            apply();</span></span><br><span class="line"><span class="undefined">                        &#125;;</span></span><br><span class="line"><span class="undefined">                    &#125;)(i);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">apply</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">"[ng-bind='counter']"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (list[i].innerHTML != counter) &#123;</span></span><br><span class="line"><span class="undefined">                        list[i].innerHTML = counter;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/* 绑定关系区结束 */</span></span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样做的坏处是自己变更数据后，是无法自动改变DOM的，必须要想办法触发<code>apply()</code>，所以只能借助<code>ng-click</code>的包装，在<code>ng-click</code>中包含真实的<code>click</code>事件监听并追加脏值检测以判断是否要更新DOM。  </p><p>另外一个坏处是如果不注意，每次脏值检测会检测大量的数据，而很多数据是没有检测的必要的，容易影响性能。  </p><p>关于如何实现一个和angular一样的脏值检测，知道原理后还有很多工作要去做，以及如何优化等等。如果有兴趣可以看看民工叔曾经推荐的《Build Your Own Angular.js》，第一章<code>Scope</code>便讲了如何实现angular的作用域和脏值检测。对了，上面的例子也是从民工叔的博客稍加修改来的，建议最后去看下原文，链接在参考资料中。</p><h2 id="ES5的getter与setter"><a href="#ES5的getter与setter" class="headerlink" title="ES5的getter与setter"></a>ES5的<code>getter</code>与<code>setter</code></h2><p>在ES5中新增了一个<code>Object.defineProperty</code>，直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure></p><p>其接受的第三个参数可以取<code>get</code>和<code>set</code>并各自对应一个<code>getter</code>和<code>setter</code>方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">zhihu</span>:<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, <span class="string">'zhihu'</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get：'</span> + zhihu);</span><br><span class="line">    <span class="keyword">return</span> zhihu;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    zhihu = value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set:'</span> + zhihu);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a.zhihu = <span class="number">2</span>; <span class="comment">// set:2</span></span><br><span class="line"><span class="built_in">console</span>.log(a.zhihu); <span class="comment">// get：2</span></span><br><span class="line">                      <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>基于ES5的<code>getter</code>和<code>setter</code>可以说几乎完美符合了要求。为什么要说<code>几乎</code>呢？  </p><p>首先IE8及更低版本IE是无法使用的，而且这个特性是没有<code>polyfill</code>的，无法在不支持的平台实现，<br>这也是基于ES5<code>getter</code>和<code>setter</code>的Vue.js不支持IE8及更低版本IE的原因。也许有人会提到<code>avalon</code>，<code>avalon</code>在低版本IE借助<code>vbscript</code>一些黑魔法实现了类似的功能。  </p><p>除此之外，还有一个问题就是修改数组的<code>length</code>，直接用索引设置元素如<code>items[0] = {}</code>，以及数组的<code>push</code>等变异方法是无法触发<code>setter</code>的。<br>如果想要解决这个问题可以参考Vue的做法，在Vue的<code>observer/array.js</code>中，Vue直接修改了数组的原型方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">;[</span><br><span class="line">  <span class="string">'push'</span>,</span><br><span class="line">  <span class="string">'pop'</span>,</span><br><span class="line">  <span class="string">'shift'</span>,</span><br><span class="line">  <span class="string">'unshift'</span>,</span><br><span class="line">  <span class="string">'splice'</span>,</span><br><span class="line">  <span class="string">'sort'</span>,</span><br><span class="line">  <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line">.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">var</span> original = arrayProto[method]</span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// avoid leaking arguments:</span></span><br><span class="line">    <span class="comment">// http://jsperf.com/closure-with-arguments</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="built_in">arguments</span>.length</span><br><span class="line">    <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(i)</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      args[i] = <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = original.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="keyword">var</span> ob = <span class="keyword">this</span>.__ob__</span><br><span class="line">    <span class="keyword">var</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">    <span class="comment">// notify change</span></span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样重写了原型方法，在执行数组变异方法后依然能够触发视图的更新。  </p><p>但是这样还是不能解决修改数组的<code>length</code>和直接用索引设置元素如<code>items[0] = {}</code>的问题，想要解决依然可以参考Vue的做法：<br>前一个问题可以直接用新的数组代替旧的数组；后一个问题可以为数组拓展一个<code>$set</code>方法，在执行修改后顺便触发视图的更新。</p><h2 id="已被废弃的Object-observe"><a href="#已被废弃的Object-observe" class="headerlink" title="已被废弃的Object.observe"></a>已被废弃的<code>Object.observe</code></h2><p><code>Object.observe</code>曾在ES7的草案中，并在提议中进展到stage2，最终依然被废弃。<br>这里只举一个MDN上的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个数据模型</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  id: <span class="number">0</span>,</span><br><span class="line">  name: <span class="string">'Brendan Eich'</span>,</span><br><span class="line">  title: <span class="string">'Mr.'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户的greeting</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateGreeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  user.greeting = <span class="string">'Hello, '</span> + user.title + <span class="string">' '</span> + user.name + <span class="string">'!'</span>;</span><br><span class="line">&#125;</span><br><span class="line">updateGreeting();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.observe(user, <span class="function"><span class="keyword">function</span>(<span class="params">changes</span>) </span>&#123;</span><br><span class="line">  changes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">change</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当name或title属性改变时, 更新greeting</span></span><br><span class="line">    <span class="keyword">if</span> (change.name === <span class="string">'name'</span> || change.name === <span class="string">'title'</span>) &#123;</span><br><span class="line">      updateGreeting();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>由于是已经废弃了的特性，Chrome虽然曾经支持但也已经废弃了支持，这里不再讲更多，有兴趣可以搜一搜以前的文章，这曾经是一个被看好的特性（<a href="http://div.io/topic/600" target="_blank" rel="noopener">Object.observe()带来的数据绑定变革</a>）。<br>当然关于它也有一些替代品<a href="https://github.com/polymer/observe-js" target="_blank" rel="noopener">Polymer/observe-js</a>。</p><h2 id="ES6带来的Proxy"><a href="#ES6带来的Proxy" class="headerlink" title="ES6带来的Proxy"></a>ES6带来的<code>Proxy</code></h2><p>人如其名，类似HTTP中的代理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure></p><p><code>target</code>为目标对象，可以是任意类型的对象，比如数组，函数，甚至是另外一个代理对象。<br><code>handler</code>为处理器对象，包含了一组代理方法，分别控制所生成代理对象的各种行为。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">obj, prop, value</span>) </span>&#123;</span><br><span class="line">    obj[prop] = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">'zhihu'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"set "</span> + prop + <span class="string">": "</span> + obj[prop]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a.zhihu = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>当然，<code>Proxy</code>的能力远不止此，还可以实现代理转发等等。  </p><p>但是要注意的是目前浏览器中只有Firefox18支持这个特性，而babel官方也表明不支持这个特性：</p><blockquote><p>Unsupported feature<br>Due to the limitations of ES5, Proxies cannot be transpiled or polyfilled.</p></blockquote><p>目前已经有babel插件可以实现，但是据说实现的比较复杂。<br>如果是Node的话升级到目前的最新版本应该就可以使用了，上面的例子测试环境为Node v6.4.0。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/xufei/blog/issues/10" target="_blank" rel="noopener">Angular沉思录（一）数据绑定</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty() - JavaScript | MDN</a></li><li><a href="https://github.com/vuejs/vue/blob/dev/src/observer/array.js" target="_blank" rel="noopener">vue/array.js at dev · vuejs/vue</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/observe" target="_blank" rel="noopener">Object.observe() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">Proxy - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/44724640&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何监听 js 中变量的变化?&lt;/a&gt;&lt;br&gt;我现在有这样一个需求，需要监控js的某个变量的改变，如果该变量发生变化，则触发一些事件，不能使用timeinterval之类的定时去监控的方法，不知道有比较好的解决方案么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题问的很好。  &lt;/p&gt;
&lt;p&gt;流行的MVVM的JS库/框架都有共同的特点就是数据绑定，在数据变更后响应式的自动进行相关计算并变更DOM展现。所以这个问题也可以理解为&lt;strong&gt;如何实现MVVM库/框架的数据绑定&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;常见的数据绑定的实现有脏值检测，基于ES5的&lt;code&gt;getter&lt;/code&gt;和&lt;code&gt;setter&lt;/code&gt;，以及ES已被废弃的&lt;code&gt;Object.observe&lt;/code&gt;，和ES6中添加的&lt;code&gt;Proxy&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
      <category term="Proxy" scheme="https://blog.daraw.cn/tags/Proxy/"/>
    
      <category term="脏值检测" scheme="https://blog.daraw.cn/tags/%E8%84%8F%E5%80%BC%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS实现自定义事件</title>
    <link href="https://blog.daraw.cn/2016/08/02/javascript-event-emitter/"/>
    <id>https://blog.daraw.cn/2016/08/02/javascript-event-emitter/</id>
    <published>2016-08-02T22:30:00.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><blockquote><p>请实现下面的自定义事件Event对象的接口，功能见注释（测试1）<br>该Event对象的接口需要能被其他对象拓展复用（测试2）<br><a id="more"></a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 1</span></span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">Event.emit(<span class="string">"test"</span>, <span class="string">"hello world"</span>); <span class="comment">// 输出“hello world”和”test”</span></span><br><span class="line"><span class="comment">//测试2</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(person1, Event);</span><br><span class="line"><span class="built_in">Object</span>.assign(person2, Event);</span><br><span class="line"></span><br><span class="line">person1.on(<span class="string">"call1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person2.on(<span class="string">"call2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person1.emit(<span class="string">"call1"</span>); <span class="comment">// 输出“person1”</span></span><br><span class="line">person1.emit(<span class="string">"call2"</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">"call1"</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">"call2"</span>); <span class="comment">// 输出”person2”</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是个经典的自定义事件，实现”Pub/Sub”，Node.js中有个比较完善的实现<code>EventEmitter</code>。  </p><p>原理则是构造出一个集成队列的对象，每一个事件对应对象的一个队列，在自定义事件后将回调函数入队，触发事件后回调函数依次出队并执行。  </p><p>个人偏爱IIFE+构造器模式+原型模式，于是有了下面的一个简易实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  EventEmitter.prototype.on = <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._cbQueue = <span class="keyword">this</span>._cbQueue || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._cbQueue[type] = <span class="keyword">this</span>._cbQueue[type]|| [];</span><br><span class="line">    <span class="keyword">this</span>._cbQueue[type].push(handler);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  EventEmitter.prototype.emit = <span class="function"><span class="keyword">function</span> (<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._cbQueue[type]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._cbQueue[type].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        cb(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  exports.EventEmitter = EventEmitter;</span><br><span class="line"></span><br><span class="line">&#125;(global));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Event = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test 1</span></span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">Event.emit(<span class="string">"test"</span>, <span class="string">"hello world"</span>); <span class="comment">// 输出“hello world”和”test”</span></span><br></pre></td></tr></table></figure></p><p>这样便满足了测试1的要求，然而这样对于测试2是不行的，因为<code>Object.assign()</code>方法不能复制不可遍历的属性和继承属性，也就意味着<code>Event</code>对象上的<code>on</code>和<code>emit</code>不能被复制过去。那么复制<code>Event.prototype</code>对象呢？这样确实是可行的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test2</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(person1, EventEmitter.prototype);</span><br><span class="line"><span class="built_in">Object</span>.assign(person2, EventEmitter.prototype);</span><br><span class="line"></span><br><span class="line">person1.on(<span class="string">"call1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person2.on(<span class="string">"call2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person1.emit(<span class="string">"call1"</span>); <span class="comment">// 输出“person1”</span></span><br><span class="line">person1.emit(<span class="string">"call2"</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">"call1"</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">"call2"</span>); <span class="comment">// 输出”person2”</span></span><br></pre></td></tr></table></figure></p><p>虽然差不多实现了题目中的要求，但是和题目中的要求依然有些偏差，于是我又想到了，如果放弃原型模式+构造器模式，单纯的把Event作为一个对象而不是一个函数呢？<br>实现很简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Event = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  Event.on = <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._cbQueue = <span class="keyword">this</span>._cbQueue || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._cbQueue[type] = <span class="keyword">this</span>._cbQueue[type]|| [];</span><br><span class="line">    <span class="keyword">this</span>._cbQueue[type].push(handler);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Event.emit = <span class="function"><span class="keyword">function</span> (<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._cbQueue[type]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._cbQueue[type].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        cb(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  exports.Event = Event;</span><br><span class="line"></span><br><span class="line">&#125;(global));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Test 1</span></span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">Event.emit(<span class="string">"test"</span>, <span class="string">"hello world"</span>); <span class="comment">// 输出“hello world”和”test”</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test2</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(person1, Event);</span><br><span class="line"><span class="built_in">Object</span>.assign(person2, Event);</span><br><span class="line"></span><br><span class="line">person1.on(<span class="string">"call1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person2.on(<span class="string">"call2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person1.emit(<span class="string">"call1"</span>); <span class="comment">// 输出“person1”</span></span><br><span class="line">person1.emit(<span class="string">"call2"</span>); <span class="comment">// 输出”person2”</span></span><br><span class="line">person2.emit(<span class="string">"call1"</span>); <span class="comment">// 输出”person1”</span></span><br><span class="line">person2.emit(<span class="string">"call2"</span>); <span class="comment">// 输出”person2”</span></span><br></pre></td></tr></table></figure></p><p>测试1的结果如预期一样，然而测试2却出了问题，debug看了一下<code>Event</code>对象，<code>Event.on</code>执行后上面竟然有个可以遍历的属性<code>_cbQueue</code>，而且<code>_cbQueue</code>是一个对象而不是一个字面量，所以在<code>Object.assign()</code>拷贝的过程中，将<code>Event._cbQueue</code>对象引用赋值给了<code>person1._cbQueue</code>和<code>person2._cbQueue</code>，也就是说这三者指向了内存中的同一个对象，只要修改一个，其他几个都会跟着修改；当不执行<code>Event.on</code>时，<code>Event</code>上就不会有属性<code>_cbQueue</code>，那么接下来<code>person1</code>和<code>person2</code>执行<code>on</code>方法后，<code>this</code>指向了他们本身，会创造他们自己的互不影响的<code>_cbQueue</code>属性。<br>但不执行<code>Event.on</code>这不是解决的完美办法，不过问题已经定位了，解决也很简单，修改<code>Event</code>对象的属性<code>_cbQueue</code>为不可遍历，让拷贝过程不拷贝属性<code>_cbQueue</code>即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Event = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Event, <span class="string">"_cbQueue"</span>, &#123;</span><br><span class="line">  value : &#123;&#125;,</span><br><span class="line">  writable : <span class="literal">true</span>,</span><br><span class="line">  enumerable : <span class="literal">false</span>,</span><br><span class="line">  configurable : <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Event.on = <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._cbQueue = <span class="keyword">this</span>._cbQueue || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._cbQueue[type] = <span class="keyword">this</span>._cbQueue[type]|| [];</span><br><span class="line">    <span class="keyword">this</span>._cbQueue[type].push(handler);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Event.emit = <span class="function"><span class="keyword">function</span> (<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._cbQueue[type]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._cbQueue[type].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        cb(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  exports.Event = Event;</span><br><span class="line"></span><br><span class="line">&#125;(global));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Test 1</span></span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line">Event.on(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">Event.emit(<span class="string">"test"</span>, <span class="string">"hello world"</span>); <span class="comment">// 输出“hello world”和”test”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test2</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(person1, Event);</span><br><span class="line"><span class="built_in">Object</span>.assign(person2, Event);</span><br><span class="line"></span><br><span class="line">person1.on(<span class="string">"call1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person2.on(<span class="string">"call2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"person2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person1.emit(<span class="string">"call1"</span>); <span class="comment">// 输出“person1”</span></span><br><span class="line">person1.emit(<span class="string">"call2"</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">"call1"</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">"call2"</span>); <span class="comment">// 输出”person2”</span></span><br></pre></td></tr></table></figure></p><p>这样便算完美实现了题目的要求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实原理很简单，没想到在周边的实现上浪费了一些debug的时间，有些惭愧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;要求&quot;&gt;&lt;a href=&quot;#要求&quot; class=&quot;headerlink&quot; title=&quot;要求&quot;&gt;&lt;/a&gt;要求&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;请实现下面的自定义事件Event对象的接口，功能见注释（测试1）&lt;br&gt;该Event对象的接口需要能被其他对象拓展复用（测试2）&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的继承</title>
    <link href="https://blog.daraw.cn/2016/07/14/inheritance-in-JavaScript/"/>
    <id>https://blog.daraw.cn/2016/07/14/inheritance-in-JavaScript/</id>
    <published>2016-07-14T16:21:19.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>最近在按照vue.js的历史commit依次阅读代码来学习和了解vue.js。<br>在读到<code>commit 5ce3b82</code>时，发现这个时候尤大把<code>Seed</code>组件类抽象了出来，并提供了<code>extend</code>的接口可以自定义组件类，而自定义组件类继承于父类<code>Seed</code>。<br><a id="more"></a><br><code>main.js</code>中这一块地方实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Seed.extend = <span class="function"><span class="keyword">function</span> (<span class="params">opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Spore = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Seed.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> <span class="keyword">this</span>.extensions) &#123;</span><br><span class="line">            <span class="keyword">var</span> ext = <span class="keyword">this</span>.extensions[prop]</span><br><span class="line">            <span class="keyword">this</span>.scope[prop] = (<span class="keyword">typeof</span> ext === <span class="string">'function'</span>)</span><br><span class="line">                ? ext.bind(<span class="keyword">this</span>)</span><br><span class="line">                : ext</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Spore.prototype = <span class="built_in">Object</span>.create(Seed.prototype)</span><br><span class="line">    Spore.prototype.extensions = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> opts) &#123;</span><br><span class="line">        Spore.prototype.extensions[prop] = opts[prop]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Spore</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>顺便不得不提下尤大的代码写的非常优雅，虽然他是不加分号党，而我是分号党，但读他的代码并不会感觉什么不适。<br>这儿可以看出来通过JS的原型实现了继承，顺便复习一下JS的继承吧。  </p><h2 id="ES3时代的继承"><a href="#ES3时代的继承" class="headerlink" title="ES3时代的继承"></a>ES3时代的继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lang = <span class="string">"js"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype = &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行初始化</span></span><br><span class="line">Father.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line">Son.prototype.name = <span class="string">'son'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sonTest = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="built_in">console</span>.log(sonTest.name); <span class="comment">// son</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest.lang); <span class="comment">// js</span></span><br><span class="line">sonTest.say(); <span class="comment">// Hello World</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest.constructor === Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>sonTest</code>对象能够访问<code>Father</code>实例属性<code>lang</code>，并能同时访问<code>Son.prototype</code>和<code>Father.prototype</code>上的对象，<br>重复使用原型上的实例而不是新建一个实例，也就是实现了继承。<br>原理也很简单，在查找一个对象的属性时，如果自身没有这个属性，会向上遍历原型链，一级一级向上查找，直到找到所要的属性，<br>而原型链的顶部则是<code>Object.prototype</code>，若依然没有查找，那么这个值为<code>undefined</code>。  </p><p>而通过将子类的<code>prototype</code>属性设为父类的一个实例对象，则能后让父类的<code>prototype</code>出现在子类的原型链中，也就是实现了原型继承。  </p><p>另外要注意性能方面的影响，继承的优点是通过共享原型链上的属性/函数来节省内存，但是属性在原型链的上方会消耗查找时间，<br>特别是属性根本不存在时，会遍历整个原型链。  </p><h2 id="ES5时代的继承"><a href="#ES5时代的继承" class="headerlink" title="ES5时代的继承"></a>ES5时代的继承</h2><p>ES5中<code>Object</code>对象新增了一个方法，叫<code>create</code>，<code>Object.create</code>方法接受传入一个作为新创建对象的原型的对象，<br>创建一个拥有指定原型和若干个指定属性的对象。那么上面的例子可以改写为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lang = <span class="string">"js"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype = &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">Father.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line">Son.prototype.name = <span class="string">'son'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sonTest = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="built_in">console</span>.log(sonTest.name); <span class="comment">// son</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest.lang); <span class="comment">// js</span></span><br><span class="line">sonTest.say(); <span class="comment">// Hello World</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest.constructor === Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>好吧，其实也没简化什么。<br>但是<code>Object.create</code>还是很强大的，它可以顺带传入若干个指定属性，借用MDN上的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个原型为null的空对象</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">  <span class="comment">// foo会成为所创建对象的数据属性</span></span><br><span class="line">  foo: &#123; <span class="attr">writable</span>:<span class="literal">true</span>, <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="attr">value</span>: <span class="string">"hello"</span> &#125;,</span><br><span class="line">  <span class="comment">// bar会成为所创建对象的访问器属性</span></span><br><span class="line">  bar: &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"Setting `o.bar` to"</span>, value) &#125;</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">o = <span class="keyword">new</span> Constructor();</span><br><span class="line"><span class="comment">// 上面的一句就相当于:</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line"><span class="comment">// 当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></span><br><span class="line">o.p = <span class="number">24</span></span><br><span class="line">o.p</span><br><span class="line"><span class="comment">//42</span></span><br><span class="line"></span><br><span class="line">o.q = <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(prop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"q"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> o.p</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个可写的,可枚举的,可配置的属性p</span></span><br><span class="line">o2 = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125; &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="ES6时代的继承"><a href="#ES6时代的继承" class="headerlink" title="ES6时代的继承"></a>ES6时代的继承</h2><p>其实对于ES6我也并不熟悉，但是这已经是2016年下半年，说到继承不提一下ES6的<code>class</code>我都不好意思。虽然ES6的类是语法糖，但回顾ES6之前的说原型继承更先进的那些文章和书，真是分分钟打脸。<br>上面的例子用ES6可以简写为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.lang = <span class="string">"js"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype.name = <span class="string">"son"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sonTest = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="built_in">console</span>.log(sonTest.name); <span class="comment">// son</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest.lang); <span class="comment">// js</span></span><br><span class="line">sonTest.say(); <span class="comment">// Hello World</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(sonTest.constructor === Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>确实简化了很多，不过要注意的是ES6的类只是语法糖，实现还是依赖原型，正如上面所示，<code>Son</code>类依然可以定义原型属性<code>name</code>，<br>让实例来共享原型属性。<br>关于ES6的类，这里就不说更多了，推荐阮一峰老师的《ES6入门》。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/vuejs/vue/commit/5ce3b82b91a134f57dd1dffe8553cec369a56c70" target="_blank" rel="noopener">refactor · vuejs/vue@5ce3b82</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript-Garden</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create() - JavaScript | MDN</a></li><li><a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">Class - ECMAScript 6入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在按照vue.js的历史commit依次阅读代码来学习和了解vue.js。&lt;br&gt;在读到&lt;code&gt;commit 5ce3b82&lt;/code&gt;时，发现这个时候尤大把&lt;code&gt;Seed&lt;/code&gt;组件类抽象了出来，并提供了&lt;code&gt;extend&lt;/code&gt;的接口可以自定义组件类，而自定义组件类继承于父类&lt;code&gt;Seed&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
      <category term="继承" scheme="https://blog.daraw.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JS反转数组中指定部分</title>
    <link href="https://blog.daraw.cn/2016/06/26/reverse-part-of-an-array/"/>
    <id>https://blog.daraw.cn/2016/06/26/reverse-part-of-an-array/</id>
    <published>2016-06-26T21:14:00.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>其实这是我在网易面试时的一题面试题，翻看复习《JS高程》时想起来了这个问题，随手写下这题答案。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reversePart</span>(<span class="params">toReverseArray, start = <span class="number">0</span>, end = toReverseArray.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> firstPart = toReverseArray.slice(<span class="number">0</span>, start),</span><br><span class="line">        toReversePart = toReverseArray.slice(start, end),</span><br><span class="line">        lastPart = toReverseArray.slice(end, toReverseArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> firstPart.concat(toReversePart.reverse(), lastPart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数接受三个函数，第一个是待处理的数组，第二个是要反转部分的起始位置，第三个是要反转部分的终止位置。若不传第三个参数，则返回从起始位置到末尾部分反转后的数组；若不传二三两个参数，则和<code>reverse()</code>方法等效。注意和数组的<code>slice()</code>方法类似，反转起始位置到终止位置的部分，但是不会包含结束位置的项。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这是我在网易面试时的一题面试题，翻看复习《JS高程》时想起来了这个问题，随手写下这题答案。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>制作列带有斑马条纹背景的表格</title>
    <link href="https://blog.daraw.cn/2016/05/16/table-with-striped-lines/"/>
    <id>https://blog.daraw.cn/2016/05/16/table-with-striped-lines/</id>
    <published>2016-05-16T13:27:00.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>在切页面时，遇到了一个有趣的表格，如图所示：<br><a id="more"></a><br><img src="/img/table-with-striped-lines0.png" alt="">  </p><p>下意识的想到了<code>bootstrap</code>的斑马纹效果table，然而记忆中bs只有行斑马纹效果，至于实现事实上很简单，直接去Github看最终生成的<code>bootstrap.css</code>文件，当前的2321~2323行为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table-striped</span> &gt; <span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-of-type(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上这给了我一个很好的思路，借助<code>nth-child()</code>选择器，先对每行的奇数<code>td</code>设定背景，连起来就是奇数列做了特殊背景处理，也就是斑马纹效果，然后再对第一行和最后一行做特殊处理让边角圆润，下面贴上自己的代码（主要提供一个思路，css比较烂，请轻喷==）：<br><strong>html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"account-course-lessons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>L1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>L2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>L3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>L4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>L5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>scss</strong><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span><span class="selector-class">.account-course-lessons</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: rgb(<span class="number">221</span>, <span class="number">221</span>, <span class="number">221</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">tr</span> &#123;</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid rgb(<span class="number">215</span>, <span class="number">215</span>, <span class="number">215</span>);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: gray;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">tr</span> &#123;</span><br><span class="line">    <span class="selector-tag">td</span>:nth-child(2n+1) &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid rgb(<span class="number">215</span>, <span class="number">215</span>, <span class="number">215</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">tr</span>:nth-child(1) &#123;</span><br><span class="line">    <span class="selector-tag">td</span>:nth-child(2n+1) &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">tr</span>:nth-last-child(1) &#123;</span><br><span class="line">    <span class="selector-tag">td</span>:nth-child(2n+1) &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-radius</span>:  <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在切页面时，遇到了一个有趣的表格，如图所示：&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://blog.daraw.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>git用户名莫名其妙变化及挽救措施</title>
    <link href="https://blog.daraw.cn/2016/04/22/git-commit-name-change/"/>
    <id>https://blog.daraw.cn/2016/04/22/git-commit-name-change/</id>
    <published>2016-04-22T09:59:00.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚提交了一次commit并推到github的远程仓库后，突然发现最近的commit提交都没有记录到contributions里，而且commit记录中我的头像无法正常显示。<br><a id="more"></a><br>查了一下查到了github的帮助文档：</p><ul><li><a href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/" target="_blank" rel="noopener">Why are my contributions not showing up on my profile?</a></li><li><a href="https://help.github.com/articles/changing-author-info/" target="_blank" rel="noopener">Changing author info</a></li></ul><p>英语不好的还可以看看这篇博客：<a href="https://segmentfault.com/a/1190000004318632" target="_blank" rel="noopener">为什么Github没有记录你的Contributions</a>  </p><p>在本地仓库目录下<code>git log</code>查看了历史记录，发现出问题的那几次的用户名变成了windows的用户名，邮箱也是用户名。<br>按照帮助文档修复了commit作者信息，并提交了github的远程仓库后，终于正常了。  </p><p>最后，在git bash中设定好git配置文件的用户信息：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "CodeDaraW"</span><br><span class="line">git config --global user.email "CodeDaraW@gmail.com"</span><br></pre></td></tr></table></figure></p><p>一切就正常了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨晚提交了一次commit并推到github的远程仓库后，突然发现最近的commit提交都没有记录到contributions里，而且commit记录中我的头像无法正常显示。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="https://blog.daraw.cn/categories/git/"/>
    
    
      <category term="git" scheme="https://blog.daraw.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于XSS的一些想法</title>
    <link href="https://blog.daraw.cn/2016/03/27/thoughts-about-xss/"/>
    <id>https://blog.daraw.cn/2016/03/27/thoughts-about-xss/</id>
    <published>2016-03-27T19:53:48.000Z</published>
    <updated>2018-03-25T14:58:12.478Z</updated>
    
    <content type="html"><![CDATA[<p>这两天想系统的去学习一些信息安全的知识，于是去刷了一些入门级别的CTF的题目，结果依然被虐哭，只独立做出了几条Web方向和JS相关的题目。<br><a id="more"></a></p><p>接着去刷完了<a href="xss-quiz.int21h.jp">xss-quiz</a>，本身对常见的xss也有一点了解，开始的几条做起来还是很快的，后面的就不得不参考一些writeups了。好在也搞了这么久Web开发，基本看下思路就明白了背后的原理。  </p><p>关于反射型xss，现代化的浏览器基本都能自动防范了，但是存储型xss依然很常见，特别是在一些开发水平偏低的团队的产品中，这也是危害较大的一种，很容易一打一大片。  </p><p>xss的防范其实一般场景下解决起来也很容易，基本就是围绕着过滤，转义等等，而寻找xss的触发点也基本就是（绕过过滤转义等等）拼接字符串触发执行JS代码。<br>但是在很多产品中，依然是发现一个洞补一个洞，没有一个全局的解决方案。<br>在安全做的比较好的团队里，一般会有一些自动化扫描DOM XSS的工具，但是一些不怎么注重安全或者说有心无力的团队只能做好力所能及的部分了。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天想系统的去学习一些信息安全的知识，于是去刷了一些入门级别的CTF的题目，结果依然被虐哭，只独立做出了几条Web方向和JS相关的题目。&lt;br&gt;
    
    </summary>
    
      <category term="信息安全" scheme="https://blog.daraw.cn/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://blog.daraw.cn/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中函数的变量提升</title>
    <link href="https://blog.daraw.cn/2016/03/13/javascript-hoisting-functions/"/>
    <id>https://blog.daraw.cn/2016/03/13/javascript-hoisting-functions/</id>
    <published>2016-03-13T22:13:05.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>整理文件时偶然发现了一个讲JS预编译的PDF，仔细一看其实讲的是变量提升。文件中的一段代码有点无法理解：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>控制台输出的是1，按照道理JS没有重载，下一个函数应该会覆盖上一个同名函数，但是为什么输出的是<code>1</code>呢？<br><a id="more"></a></p><p>这是一个讲变量提升的文章，那应该是变量提升在作祟。<br>记得在博客园看过一篇讲JS变量提升的文章<a href="http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html" target="_blank" rel="noopener">JavaScript中变量提升</a>，文中曾经说过：</p><blockquote><p>函数提升是把整个函数都提到前面去。<br>在我们写js code 的时候，我们有2中写法，一种是函数表达式，另外一种是函数声明方式。我们需要重点注意的是，只有函数声明形式才能被提升。</p></blockquote><p>下面还有代码演示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明方式提升【成功】</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我来自 foo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myTest(); <span class="comment">// 我来自 foo</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式方式提升【失败】</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">var</span> foo =<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我来自 foo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myTest(); <span class="comment">// foo is not a function</span></span><br></pre></td></tr></table></figure><p>其实这篇文章是<strong>有问题</strong>的，看下面两段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">myTest(); <span class="comment">// foo is not defined</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">myTest(); <span class="comment">// foo is not a function</span></span><br></pre></td></tr></table></figure><p>注意两个报错信息的区别，<code>is not a function</code>和<code>is not defined</code>，<code>is not a function</code>事实上已经发生了变量提升！  </p><p>那么函数声明和函数表达式的变量提升有什么区别呢？<br>《JavaScript秘密花园》中的一个栗子很清楚明了：</p><blockquote><p>JavaScript 会提升变量声明。这意味着 var 表达式和 function 声明都将会被提升到当前作用域的顶部。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bar();</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> someValue = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        goo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> goo = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码在运行之前将会被转化。JavaScript 将会把 var 表达式和 function 声明提升到当前作用域的顶部。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 表达式被移动到这里</span></span><br><span class="line"><span class="keyword">var</span> bar, someValue; <span class="comment">// 缺省值是 'undefined'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明也会提升</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> goo, i, e; <span class="comment">// 没有块级作用域，这些变量被移动到函数顶部</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        goo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        goo = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        e = data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// 出错：TypeError，因为 bar 依然是 'undefined'</span></span><br><span class="line">someValue = <span class="number">42</span>; <span class="comment">// 赋值语句不会被提升规则（hoisting）影响</span></span><br><span class="line">bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>那么一开始的栗子其实是和下面的代码等效的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>一切也就不难理解了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理文件时偶然发现了一个讲JS预编译的PDF，仔细一看其实讲的是变量提升。文件中的一段代码有点无法理解：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;控制台输出的是1，按照道理JS没有重载，下一个函数应该会覆盖上一个同名函数，但是为什么输出的是&lt;code&gt;1&lt;/code&gt;呢？&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>记一次前端性能优化实战</title>
    <link href="https://blog.daraw.cn/2016/03/03/note-for-optimization-of-online-shop/"/>
    <id>https://blog.daraw.cn/2016/03/03/note-for-optimization-of-online-shop/</id>
    <published>2016-03-03T00:00:00.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这学期开学时去找了信息化中心的老师，说明了自己想往Node和Python方向走的想法，退出了信息化中心的学生工作室。<br>然而上周六老师又找到了我，他们对一个电商网站项目的前端性能很不满意，希望我能给他们做一套性能优化方案。<br><a id="more"></a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>和老师面谈后，确定了需要下面几个主要需求：  </p><ul><li>合并css/js文件减少http请求</li><li>压缩css/js文件减少流量</li><li>原来的模板中每个小icon都是一张图片，用雪碧图/base64减少http请求</li><li>大图懒加载，减轻后端压力</li></ul><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>常见的构建方案就是grunt,gulp,webpack,make,npm script，还有国内百度的fis。<br>经过了筛选省下了gulp和fis3两个选择，不得不说fis3已经做好了一套默认方案，几乎和信息中心的要求相符，然而经过测试发现这个项目使用gulp构建更加快一些。<br>确定了gulp后，接下来就是对照需求选插件了。</p><ul><li>开发时实时监听变化自动刷新<br>借助<code>gulp-livereload</code>插件和chrome的<code>livereload</code>插件，<code>gulpfile</code>中创建名为<code>watch</code>的<code>task</code>，监听文件变动浏览器自动刷新，解放浏览器的刷新按钮和键盘的F5。</li><li>合并js/css文件<br>为了方便开发时多个文件引入，和模块化的开发，一开始使用了<code>gulp-usemin</code>插件，使用起来确实挺方便的，然而发现在多个页面构建时就废了，查了一下发现npm建议使用<code>gulp-useref</code>代替。<br>然而接着发现<code>gulp-useref</code>不能将外联转化为内联，而且在流中处理了文件名后不会像<code>gulp-usemin</code>自动修改引用文件的地址，好在有<code>gulp-rev-replace</code>插件可以自动在流中修改html文件中的引用地址。<br>而将外联文件合并为内联文件则可以用<code>gulp-inline-source</code>插件，和<code>gulp-usemin</code>差不多。</li><li>js/css文件压缩<br>分别用<code>gulp-uglify</code>和<code>gulp-cssnano</code>插件，这个没什么好说的。</li><li>版本更迭css/js文件冗余<br>常见的有文件名加时间戳和hash两种方案，选哪个倒感觉无所谓了，这边用<code>gulp-rev</code>插件实现hash冗余文件，服务器端静态资源半年清理个一次也就差不多了。</li><li>小图优化<br>常见的就是把小图转成字体文件，SVG，雪碧图，base64这几种方案。<br>这边选择了base64，其实base64有利有害，合并进css文件会变大1/3左右，而且css文件太大后会延长css文件渲染时间。这边我设定的5KB为阈值，css文件大概增加了100k，影响不大，图片跟着css文件一起缓存，倒也不错。</li><li>大图懒加载<br>由于原来就使用了jquery，于是用了百度改过的jquery图片懒加载插件，这里遇到了一个大坑。<br>假设<code>html</code>中有两个<code>div</code>，通过css将第一块放在左边当作侧栏，第二块放在右边当作主栏，将所有图片都做懒加载处理，如果左栏高度过高，左栏看完了右栏才能开始加载。<br>鹅厂的大牛张鑫旭曾经也写过一个这样的插件。这类的插件原理都类似，大致看了下源码，猜测是插件设计时没有想到这种场景，所以出现了这种蜜汁bug。<br>突然想起来，百度说他的百度地图和糯米都用了这个插件，那不如去看看他们怎么解决的。<br>看了下糯米的页面，原来他们不对侧栏做懒加载处理。我取消了侧栏的懒加载处理，果然就正常了。</li></ul><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>这是第一次将这些优化方案在这样一个较大的项目中使用，这个项目还没有结束，如果有新的变化视情况来更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这学期开学时去找了信息化中心的老师，说明了自己想往Node和Python方向走的想法，退出了信息化中心的学生工作室。&lt;br&gt;然而上周六老师又找到了我，他们对一个电商网站项目的前端性能很不满意，希望我能给他们做一套性能优化方案。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://blog.daraw.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="gulp" scheme="https://blog.daraw.cn/tags/gulp/"/>
    
      <category term="性能优化" scheme="https://blog.daraw.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>The Little Prince</title>
    <link href="https://blog.daraw.cn/2016/02/14/the-little-prince/"/>
    <id>https://blog.daraw.cn/2016/02/14/the-little-prince/</id>
    <published>2016-02-14T00:00:39.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<p>“什么叫‘驯服’呢？”  </p><p>“这是已经早就被人遗忘了的事情，”狐狸说，“它的意思就是‘建立联系’。”<br><a id="more"></a></p><p>“建立联系？”  </p><p>“一点不错，”狐狸说。“对我来说，你还只是一个小男孩，就像其他千万个小男孩一样。我不需要你。你也同样用不着我。对你来说，我也不过是一只狐狸，和其他千万只狐狸一样。但是，如果你驯服了我，我们就互相不可缺少了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了。”  </p><p>“我有点明白了。”小王子说，“有一朵花……，我想，她把我驯服了……”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“什么叫‘驯服’呢？”  &lt;/p&gt;
&lt;p&gt;“这是已经早就被人遗忘了的事情，”狐狸说，“它的意思就是‘建立联系’。”&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将setTimeout函数队列</title>
    <link href="https://blog.daraw.cn/2016/02/12/queue-several-functions-set-by-timeout/"/>
    <id>https://blog.daraw.cn/2016/02/12/queue-several-functions-set-by-timeout/</id>
    <published>2016-02-12T14:36:41.000Z</published>
    <updated>2018-03-25T14:58:12.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>先来看一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3000ms'</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'first'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1000ms'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'second'</span>);</span><br></pre></td></tr></table></figure></p><p>控制台输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first</span><br><span class="line">second</span><br><span class="line">1000ms</span><br><span class="line">3000ms</span><br></pre></td></tr></table></figure></p><p>如果我们想让第一个定时器的回调函数执行完再执行第二个定时器的回调函数该怎么做呢？<br><a id="more"></a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>JavaScript一开始作为浏览器脚本语言出现，为了避免多线程带来的管理问题，被设计成了单线程，即使是Node.js中的<code>cluster</code>以及Web Worker也并没有改变JS单线程的本质。<br>单线程意味着阻塞，所有的任务要排队执行，前一个任务未执行完下一个任务是不会执行的。如果有一个任务耗时很长，那么后面的任务也只有干等着。为了解决这个问题，JS内部还有一个消息队列，并采用EventLoop来处理消息队列中的消息。<br>在上述栗子中，<code>setTimeout</code>会在指定的时间向消息队列中添加一条消息，在消息得到处理的时候也就是回调函数执行的时候，而主线程中的<code>console.log</code>不会等待，所以上述栗子中先按顺序执行了两个<code>console.log</code>，然后才按照定时分别执行1000ms和3000ms时的回调函数。<br>关于JS的单线程的问题这里不做更多解释，想了解更多的话可以看看下面参考中的阮一峰老师的<a href="http://javascript.ruanyifeng.com/bom/engine.html" target="_blank" rel="noopener">浏览器的JavaScript引擎</a>，讲的非常易懂。  </p><p>那么上述问题中的需求就是说，如何做到在第一个定时器的回调函数执行后，第二个定时器才开始定时并等待执行回调函数。<br>最容易想到了方法就是回调函数。封装定时器，在回调中执行下一个封装函数，但这会导致一个问题，在稍微复杂的情况下，出现“回调地狱”，相信Node.js党应该对回调有着别样的感情。<br>So，回调函数并不是一个cool的解决方案。  </p><p>这里的另一个思路就是再构造一个函数队列，封装定时器，给定时器加锁，将其锁在一个函数里，只有确认执行结束才会执行队列中的下一个封装的定时器。  </p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>在StackOverflow上有个哥们提了个和我一样的问题，其中一个答案给了一个demo，我这里简化了一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveOne</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg1)&#123;</span><br><span class="line">        arg1 = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;recursiveOne(arg1);&#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"func1 complete"</span>);</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveTwo</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arg1)&#123;</span><br><span class="line">        arg1 = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;recursiveTwo(arg1);&#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"func2 complete"</span>);</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveThree</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arg1)&#123;</span><br><span class="line">        arg1 = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;recursiveThree(arg1);&#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"func3 complete"</span>);</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcSet = [recursiveOne, recursiveTwo, recursiveThree];</span><br><span class="line"><span class="keyword">var</span> funcArgs = [[<span class="literal">true</span>], [<span class="literal">true</span>], [<span class="literal">true</span>]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coreFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(funcSet.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> func = funcSet.shift();</span><br><span class="line">        func.apply(global, funcArgs.shift())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">coreFunction();</span><br></pre></td></tr></table></figure></p><p>免去了层层回调，优雅的解决的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun1 complete</span><br><span class="line">fun2 complete</span><br><span class="line">fun3 complete</span><br></pre></td></tr></table></figure></p><p>那么在实际开发环境如何可控的操作执行队列和锁呢？<br>构造一个入队函数，和出队执行函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcSet = [],</span><br><span class="line">    funcArgs = [],</span><br><span class="line">    funcCont = [],</span><br><span class="line">    isRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enQueue</span>(<span class="params">fn, context, args</span>) </span>&#123;</span><br><span class="line">    funcSet.push(fn);</span><br><span class="line">    funcCont.push(context);</span><br><span class="line">    funcArgs.push(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">        isRunning = <span class="literal">true</span>;</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coreFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(funcSet.length)&#123;</span><br><span class="line">        funcSet.shift().apply(funcCont.shift(), [].concat(funcArgs.shift()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的代码实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveOne</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg1)&#123;</span><br><span class="line">        arg1 = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;recursiveOne(arg1);&#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"func1 complete"</span>);</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveTwo</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg1)&#123;</span><br><span class="line">        arg1 = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;recursiveTwo(arg1);&#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"func2 complete"</span>);</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveThree</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arg1)&#123;</span><br><span class="line">        arg1 = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;recursiveThree(arg1);&#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"func3 complete"</span>);</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcSet = [],</span><br><span class="line">    funcArgs = [],</span><br><span class="line">    funcCont = [],</span><br><span class="line">    isRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enQueue</span>(<span class="params">fn, context, args</span>) </span>&#123;</span><br><span class="line">    funcSet.push(fn);</span><br><span class="line">    funcCont.push(context);</span><br><span class="line">    funcArgs.push(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">        isRunning = <span class="literal">true</span>;</span><br><span class="line">        coreFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coreFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(funcSet.length)&#123;</span><br><span class="line">        funcSet.shift().apply(funcCont.shift(), [].concat(funcArgs.shift()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enQueue(recursiveOne, <span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">enQueue(recursiveTwo, <span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">enQueue(recursiveThree, <span class="keyword">this</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://javascript.ruanyifeng.com/bom/engine.html" target="_blank" rel="noopener">浏览器的JavaScript引擎</a>  </li><li><a href="http://stackoverflow.com/questions/12839488/how-to-queue-several-functions-set-by-settimeout-with-js-jquery" target="_blank" rel="noopener">How to queue several functions set by setTimeout with JS/jQuery</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;先来看一段代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;3000ms&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;first&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1000ms&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;second&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;控制台输出为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1000ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3000ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们想让第一个定时器的回调函数执行完再执行第二个定时器的回调函数该怎么做呢？&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.daraw.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
